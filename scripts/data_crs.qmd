---
title: "data_crs"
format: html
editor: visual
---

```{r load_packages}
source(here::here('scripts', 'library.R'))
```

# Data import

Data is extracted from the OECD CRS platform as a parquet file.

```{r data_crs_import}

data_crs_import <- arrow::read_parquet(
  file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\source\\outcome\\crs\\CRS.parquet") |> 
  janitor::clean_names() |> # clean variable names
  mutate_if(is.character, str_trim) # delete white space before/after text
```

## Save

```{r save_data_crs_import}

save(data_crs_import, 
     file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_crs_import.RData")
```

# Data selection

```{r data_select}

# describe dataset
# look_for(data_import)

# select variables
data_select <- select(data_crs_import, 
                      1, 2:4, 5:6, 7:8, 9, 10:12, 13:15, 16:18, 19:24, 28:29, 50, 49, 64, 51:54, 55:58, 68, 79:82)
```

# Data cleaning

## Identification variables

I create four-digit ID variables for both donors and recipients.

```{r data_id}

# format donor_code values with leading zeros to ensure each value has 4 digits
data_id <- data_select |> 
  mutate(
    donor_id = sprintf("%04d", donor_code),
    recipient_id = sprintf("%04d", recipient_code)
    ) |> 
  relocate(donor_id, .after = donor_code) |> 
  relocate(recipient_id, .after = recipient_code)
```

## Calibrated sample

We reduce the sample to projects with the following characteristics:

### Nature of submission

-   **Remove**: (5) Provisional data, (9) Net disbursements.
-   **Keep**: (1) New activity reported, (2) Revisions, (3) Previously reported activity (increase/decrease of earlier commitment, disbursement on earlier commitment), (8) Commitment derived from Disbursement, and NAs.

> Note: Keep NAs or remove them as well?

```{r submission}

df <- filter(df, !initial_report %in% c(5,9))
```

### Type of flow

-   **Remove**: non-concessional official & private flows.

-   **Keep**: grants (11) and loans ODA (13).

```{r flow}
df <- filter(df, flow_code %in% c(11, 13))
```

### Cooperation modalities

-   **Remove**: project observations in provider countries e.g. (E) Scholarships and student costs in donor countries, (G) Administrative costs not included elsewhere, and (H) Other in-donor expenditures. Also, "Donor country personnel" (D01).
-   **Keep**: (A) Budget support, (B) Core contributions and pooled programmes and funds, (C) Project-type interventions, (D) Experts and other technical assistance, (F) Debt relief.

```{r modality}
df <- filter(df, !grepl("^[EGH].*", aid_t) & aid_t != "D01") |> 
  mutate(aid_t = na_if(aid_t, ""))
```

### Purposes

-   **Remove**: Administrative Costs of Donors (910), Refugees in Donor Countries (930), Promotion of development awareness (99820).

-   **Keep**: all other sectors.

```{r purpose}
df <- filter(df, !grepl("^(91|93)|99820", purpose_code))
```

### Recipients

-   **Remove**: unspecified, regional.

-   **Keep**: specified countries.

```{r recipient}

df <- filter(df, !grepl('unspecified|regional', recipient_name))
```

-   Add ISO3-C codes to recipient countries.

```{r}

df <- df |> 
  mutate(iso3c = countrycode(sourcevar = recipient_name,
                             origin = 'country.name.en',
                             destination = 'iso3c'
  )) |> 
  mutate(iso3c = case_when(
    recipient_name == "Kosovo" ~ "XKX",
    recipient_name == "Micronesia" ~ "FSM",
    .default = iso3c
  )) |> 
  relocate(iso3c, .after = recipient_name)
```

## Duplicates

Duplicates are removed.

```{r data_crs_clean}
data_crs_clean <- unique(df)
rm(df)
```

## Save

```{r save_data_crs_clean}

save(data_crs_clean, 
     file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_crs_clean.RData")
```

# Data transformation

## Negative values

I transform negative commitments/disbursements to zeroes.

```{r data_censored}

data_censored <- data_crs_clean |> 
  mutate(
    usd_commitment_defl_censored = ifelse(usd_commitment_defl >= 0, usd_commitment_defl, 0),
    usd_disbursement_defl_censored = ifelse(usd_disbursement_defl >= 0, usd_disbursement_defl, 0)
  ) |> 
  relocate(usd_commitment_defl_censored, .after = usd_commitment_defl) |> 
  relocate(usd_disbursement_defl_censored, .after = usd_disbursement_defl)
```

## Sectors

```{r data_sector}

# define categories 
humanitarian_purp = c(72010:74020) 
development_purp = c(11110:60063)   

sectoral_purp = c(11110:43082)
  infra_purp = c(11110:25040)
    infra_social_purp = c(11110:16080)
    infra_eco_purp = c(21010:25040)
  prod_purp = c(31110:43082)
budget_purp = 51010
inkind_purp = c(52010:53040)
debt_purp = c(60010:60063)

# create variables 
data_sector <- data_censored |>    
  mutate(     
    sector_hum = fct(case_when(       
      purpose_code %in% humanitarian_purp ~ "Humanitarian",       
      purpose_code %in% development_purp ~ "Development",       
      .default = "Other"   )),     
    sector_multi = fct(case_when(       
      purpose_code %in% humanitarian_purp ~ "Humanitarian",       
      purpose_code %in% sectoral_purp ~ "Development (sectoral)",       
      purpose_code %in% budget_purp ~ "Budget support",       
      purpose_code %in% debt_purp ~ "Debt relief",       
      ))) |>    
  relocate(sector_hum:sector_multi, .after = aid_t)
```

## Channel of delivery

### Level consistency

The OECD uses a three-level hierarchical typology to classify channels of delivery.

Depending of the channel category, the third level includes either the *type* of agency (ex: Pension Funds in Private sector in provider country) or the *name* of a specific agency (ex: African Development Bank in Regional Development Bank).

The name of the agency can also be added manually by the provider, but reporting is inconsistent and reported agencies aren't always included in the OECD's list of ODA-eligible international organisations.

#### Table: Example with the Donor Government group category.

| Code | Level 1 | Code | Level 2 | Code | Level 3 | Reported name |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| 10000 | Public Sector Institutions | 11000 | Donor Government | 11001 | Central Government | Ex: Ministry Of Employment And Labor, The U.S Department Of Homeland Security, Miscellaneous Suppliers, etc. |
|  |  |  |  | 11002 | Local Government | Ex: Comune Di Reggio Emilia, Local Government, Busan Metropolitan City, etc. |
|  |  |  |  | 11003 | Public corporations | Ex: The Export-Import Bank Of Korea, Kfw, Public Corporations, etc. |
|  |  |  |  | 11004 | Other public entities in donor country | Ex: University Of Trento, Korea Rural Economic Institute, King Salman For Relief And Humanitarian Aid Center |

There are two variables with codes for channel of delivery: `channel_parent_category` (level 1) and `channel_code` (levels 2 and 3).

To help the analysis, I create a unique code variable using the most granular level when both `channel_parent_category` and `channel_code` are both provided.

```{r data_channel}

# Create a copy of the data
dt <- setDT(data_sector)

# some missing data in 'channel_code' are labelled as zeroes
# convert zeroes to NAs
dt[channel_code == 0, channel_code := NA]

# Rename columns
setnames(dt, old = "parent_channel_code", new = "channel_parent_code")

# Define the columns that match the pattern
channel_cols <- grep("^channel.*name$", names(dt), value = TRUE)

# Harmonize style, replace "" by NA, and delete space before/after character string
dt[, (channel_cols) := lapply(.SD, function(x) na_if(str_squish(str_to_title(x)), "")),
             .SDcols = channel_cols]

# Create new variable channel_code_unique
dt[, channel_code_unique := fifelse(
  rowSums(!is.na(.SD)) == 2,
  do.call(pmax, c(.SD, na.rm = TRUE)),
  NA_real_
), .SDcols = c("channel_code", "channel_parent_code")]

# Relocate channel_code_unique after channel_parent_code
data_channel = dt |> relocate(channel_code_unique, .after = channel_parent_code)
rm(dt)
```

I also create a variable `channel_level` to specify the level of the most disaggregated channel available.

```{r channel_level}

# Create a copy of the data
df <- copy(data_channel)

# Create new variable channel_level using data.table
df[, channel_level := case_when(
  str_sub(channel_code_unique, -3) == "0000" | channel_code_unique == 51000 ~ 1,
  str_sub(channel_code_unique, -3) == "000" ~ 2,
  str_sub(channel_code_unique, -1) != 0 ~ 3
)]

# Relocate channel_level before channel_parent_code
df = df |> relocate(channel_level, .before = channel_parent_code)

# Sample and display data
df |> 
  dplyr::select(channel_level, channel_parent_code, channel_code_unique, channel_name) |> 
  filter(!is.na((channel_level))) |> 
  slice_sample(n = 10, by = channel_level) |> 
  gt()

# Update data_channel
data_channel_level <- copy(df)
rm(df)
```

### Time consistency

The channel of delivery became an *optional* reporting item on the new CRS++ reporting scheme in 2004 ([@dietrich2013]).

Information on delivery channels has been added and updated over time. Similarly, new implementing agencies have also been added, while others have seen there name and/or channel code revised. So implementing agencies may be coded and/or described differently across time and space within the dataset.

For consistency, I apply the latest code and name list provided by the OECD (last updated in April 2025)[^1].

[^1]: The Excel file can be found [here](https://webfs.oecd.org/oda/DataCollection/Resources/DAC-CRS-CODES.xlsx).

```{r data_channel_code}

# import info from the crs code list
delivery_crs_code <- read_xlsx(
# modify path accordingly  
  path = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\source\\outcome\\DAC-CRS-CODES.xlsx",
  sheet = "Channel code",
  skip = 6) |>
# clean column names  
  janitor::clean_names() |>
  mutate_if(is.character, 
    .funs = ~ str_squish(str_to_title(.))
  ) |>
  select(channel_parent_code_2024 = channel_parent_category, 
         channel_code_2024 = channel_id, 
         channel_name_2024 = full_name_english)

# merge w/ data set
data_channel_code <- left_join(data_channel_level, delivery_crs_code,
                           by = c('channel_code_unique' = 'channel_code_2024')) |>
  relocate(channel_parent_code_2024, .after = channel_parent_code) |> 
  relocate(channel_name_2024, .after = channel_name)

# Sample
data_channel_code |> 
  dplyr::select(channel_name, channel_name_2024,
                channel_parent_code, channel_parent_code_2024) |> 
  slice_sample(n = 10) |> 
  gt()
```

### Data imputation

```{r}
#| eval: false

# missing channel by year
data_channel_code |> 
  summarize(
    total_amount = sum(usd_commitment_defl_censored, na.rm = T),
    na_amount = sum(usd_commitment_defl_censored[is.na(channel_code_unique)], na.rm = T),
    .by = year) |> 
  mutate(share_na = round(na_amount / total_amount * 100, 2))

# NOTE: years < 2008 have the higher proportions of missing channels
  
  data_channel_code |> 
   summarize(
    total_amount = sum(usd_commitment_defl_censored, na.rm = T),
    na_amount = sum(usd_commitment_defl_censored[is.na(channel_code_unique)], na.rm = T),
    .by = c(sector_name, sector_code)) |> 
  mutate(share_na = round(na_amount / total_amount * 100, 2)) |> 
    arrange(desc(share_na))
  
  # NOTE: Action Relating to Debt:600 (34.5%) and GBS:510 (19%) > 50% of missing channel
  
  data_channel_code |> 
    filter(is.na(channel_code_unique)) |> 
    mutate(rep = ifelse(is.na(channel_reported_name), 1, 0)) |> 
    summarize(amount = sum(usd_commitment_defl_censored, na.rm = T), .by = rep) |> 
    mutate(total_amount=sum(amount)) |> 
    mutate(share=amount/total_amount)
  
# NOTE: a quarter of missing channel have a reported channel name

  data_channel_code |> 
#    filter(year < 2008) |>  
    filter(is.na(channel_code_unique)) |> 
    mutate(na = ifelse( 
      is.na(channel_reported_name) & !sector_code %in% c(600, 510),
      1, 0)) |> 
    summarize(amount = sum(usd_commitment_defl_censored, na.rm = T), .by = na) |> 
    mutate(total_amount=sum(amount)) |> 
    mutate(share=amount/total_amount)
  
# NOTE: more than half of the missing channel could potentially by solved
# (1) imputation rules related to Action related to Debt and General Budget Support
# (2) imputation algorithm to link channel reported name to a unique channel code
# This proportion is even higher for early years
```

```{r data_channel_imp}

data_channel_imp <- data_channel_code |> 
  mutate(channel_reported_name = str_to_lower(channel_reported_name),
         channel_code_unique = case_when(
# purpose_name=="Debt forgiveness (code:60020) -> channel_code_unique==10000          
          purpose_code==60020 ~ 10000,
# purpose_name=="General budget support-related aid" (code:51010) -> channel_code_unique==10000
          purpose_code==51010 ~ 10000, 
# channel_reported_name starts with "ministry of" or "federal ministry" -> channel_code_unique==12000
          grepl("^ministry of|federal ministry", channel_reported_name) ~ 12000,
# channel_reported_name includes "ministry of finance" or "ministries of finance" or "ministry of economy" -> channel_code_unique==12000
          grepl("ministry of finance|ministries of finance|ministry of economy", channel_reported_name) ~ 12000,
          .default = channel_code_unique
         ))
```

```{r}
#| eval: false

# % of commitments w/out a channel code but w/ a channel reported name
data_channel_imp |> 
  filter(year %in% c(2004:2007), is.na(channel_code_unique)) |> 
  mutate(report = fct(ifelse(!is.na(channel_reported_name), "Yes", "No"))) |> 
  summarize(n = sum(usd_commitment_defl_censored, na.rm = T), .by = report) |> 
  mutate(total = sum(n)) |>
  mutate(share = round(n / total * 100, 2)) |>
  arrange(desc(n))
# report        n    total share
# 1    Yes 15822.51 29213.19 54.16
# 2     No 13390.68 29213.19 45.84

# % commitments w/out a channel code and w/out a channel reported name, by flow modality
data_channel_imp |> 
  filter(year %in% c(2004:2007), is.na(channel_code_unique)) |> 
  mutate(reported_name = fct(ifelse(!is.na(channel_reported_name), "Yes", "No"))) |> 
  filter(report=="No") |>
  summarize(n = sum(usd_commitment_defl_censored, na.rm = T), .by = c(reported_name, aid_t)) |> 
  mutate(total = sum(n)) |>
  mutate(share = round(n / total * 100, 2)) |>
  arrange(desc(n))
# F01 3233.9612 13390.68 24.15
# A02  573.2544 13390.68  4.28
```

> Note: complete data imputation rules, based on sector-purpose (e.g. action related to debt) and channel reported name.

### Categories

#### Modalities

```{r data_mod}

# define categories
debt_mod = c('F01')
budget_mod = c('A01', 'A02')
core_mod = c('B01', 'B02')
pooled_mod = c('B03', 'B031', 'B032', 'B033', 'B04')
project_mod = c('C01', 'D02')

data_mod <- data_channel_imp

# create variable
data_mod <- data_mod |> 
  mutate(flow_modality = fct(case_when(
    aid_t %in% debt_mod | purpose_code %in% debt_purp ~ "Debt relief",
    aid_t %in% budget_mod | purpose_code %in% budget_purp ~ "Budget support",
    aid_t %in% core_mod ~ "Core contributions",
    aid_t %in% pooled_mod ~ "Pooled funding",
    aid_t %in% project_mod ~ "Project-type interventions and Other technical assistance",
    .default = "Other"
  ))) |> 
  relocate(flow_modality, .after = aid_t)
```

#### Channels

I create two new binary variables for State and non-State channel categories.

> To do: create additional binary variables for channels sub-categories.

```{r channel_state}

# define categories
channel_state = c(10000:12000)
channel_nonstate = c(20000:63000)
# channel_nonstate_ngo = c(20000:23000, 51000)
# channel_nonstate_multi = c(40000:47000)
# channel_nonstate_priv = c(30000:32000, 60000:63000)
# channel_other = 90000

# create variable
data_chan <- data_mod |> 
  mutate(
    channel_state = fct(case_when(
      channel_parent_code_2024 %in% channel_state ~"State",
      channel_parent_code_2024 %in% channel_nonstate ~"non-State",
      .default = "Other"
    ))) |> 
  mutate(channel_state = fct_relevel(channel_state, "Other", after = Inf)) |> 
  relocate(channel_state, .after = channel_name_2024)
```

> To do (1): create multinomial channel variable.

> To do (2): further data cleaning to reduce missingness.

## Cohorts

```{r data_cohort}

# create variables
data_cohort <- data_chan |>    
  mutate(cohort_donor = min(year), .by = donor_id) |>    
  mutate(cohort_recipient = min(year), .by = recipient_id)
```

### Year

The channel of delivery became an *optional* reporting item on the new CRS++ reporting scheme in 2004 ([@dietrich2013]).

The treatment window ends in 2018 (cf. GDIS).

```{r}
#| eval: false  

# copy 
df <- copy(data_cohort)  
df <- filter(df, year %in% 2004:2018)
```

## Save

```{r data_crs}

# copy
data_crs <- copy(data_cohort)

# save
save(data_crs, delivery_crs_code,
     file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_crs.RData")
```

```{r data_unit}

## recipient
data_iso3c <- data_crs |> 
  select(country = recipient_name, iso3c) |> 
  unique() |> 
  arrange(country)

## recipient-year
year <- 2001:2018

data_iso3c_year <- data_crs |> 
  select(country = recipient_name, iso3c) |> 
  expand(nesting(country, iso3c), year) |> 
  arrange(country)

## donor-recipient-year
data_unit <- data_crs |> 
  select(donor_id, donor_name, cohort_donor,
         recipient_id, recipient_name, iso3c, cohort_recipient) |> 
  expand(nesting(donor_id, donor_name, cohort_donor), # donor
         nesting(recipient_id, recipient_name, iso3c, cohort_recipient), # recipient
         year) |> # year
  arrange(recipient_name)

## donor-recipient-hum
data_unit_hum <- data_crs |> 
  select(donor_id, donor_name, cohort_donor,
         recipient_id, recipient_name, iso3c, cohort_recipient,
         sector_hum) |>  
  expand(nesting(donor_id, donor_name, cohort_donor), # donor
         nesting(recipient_id, recipient_name, iso3c, cohort_recipient), # recipient
         sector_hum,
         year) |> # year
  arrange(recipient_name)

## save
save(data_iso3c, data_iso3c_year, data_unit, data_unit_hum,
     file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_unit.RData")
```
