---
title: "Data: Treatment"
format: html
editor: visual
---

TO DO:

Compare Total events in GDIS/Emdat vs. High severity events

# Treatment

```{r load_pckg}

source(here::here('scripts', 'library.R'))
```

```{r}

load(here("data", "data_magnitude.RData"))
```

```{r}

data_magnitude |>
  filter(indice %in% c("rx1d", "rx90d", "tmax1d", "wmean1d")) |> 
  filter(percentile %in% c("p5", "p95")) |> 
  mutate(dis_dummy = ifelse(year_dis==year, 1, 0)) |> 
  summarize(

    n = sum(dis_dummy),
    .by = c("iso3c", "year")
  )

join_gdis_emdat |> 
  filter(!(disaster_type_gdis == "extreme temperature" & is.na(disaster_type_emdat))) |> 
    summarize(
    n = sum(dis_dummy),
    .by = c("iso3c", "year")
  )
```

```{r treat.status_H}

panelview(1 ~ , data = ,           
          index = c("iso3c","year"),      
          by.timing = TRUE,                   
          collapse.history = TRUE,
          background = "white"           
          )

```

```{r treat.status_type}

# binary treatment status 
variables <- c("", "", "", "") 

panel.bin <- variables |>      
  map(~ panelview(as.formula(paste("1 ~", .x)),                   
                  main = paste("Panel View:", .x),                   
                  by.timing = TRUE,                   
                  collapse.history = TRUE,
                  data = treatment_iso,                   
                  index = c("iso3c", "year")))   

# multinomial treatment status 
mycol<-c("#73AE80", "#2A5A5B", "#E8E8E8", "#6C83B5") 
panelview(1 ~ , data = ,           
          index = c("iso3c","year"),           
          legend.labs = c("", "", "", ""),           
          color = mycol, background = "white"           
          ) 

```

```{r treat.freq}

## Frequency by year  
treatment_iso |>    
  mutate(year=factor(year),          
         D_multi=fct_relevel(D_multi, "He_Ls", after = 1)) |>    
  filter(D_multi != "Le_Ls") |>    
  ggplot(aes(x=year, fill = D_multi)) +   
  geom_bar() +   
  scale_fill_manual(values = mycol[c(2,1,4)]) +   
  labs(y = "Frequency", fill = "Event type") +   
  theme_light()  

## Frequency by country  
# Calculate the total frequency of each iso3c 
# Pull ordered list of countries 
frequency_order <- treatment_iso |>   
  filter(D_multi != "Le_Ls") |>   
  count(iso3c, sort = TRUE) |>   
  pull(iso3c)  

# Plot with x-axis ordered by total frequency 
treatment_iso |>   
  mutate(year = factor(year),          
         D_multi = fct_relevel(D_multi, "He_Ls", after = 1)) |>   
  filter(D_multi != "Le_Ls") |>   
  # Reorder iso3c by frequency
  mutate(iso3c = fct_rev(factor(iso3c, levels = frequency_order))) |>  
  ggplot(aes(x = iso3c, fill = D_multi)) +   
  geom_bar() +   
  scale_fill_manual(values = mycol[c(2, 1, 4)]) +   
  labs(x = "Country", y = "Frequency", fill = "Event type") +   
  coord_flip() +   
  theme_light()
# Facet by region?
```

## Treatment assignments

Currently, non-absorbing staggered multiple treatments (on-and-off / scenarios).

### First-treatment staggered

```{r}

treat.vars <- c("D_H", "D_He", "D_Hs", "D_HeLs", "D_LeLs", "D_HeHs", "D_LeHs")

treatment_iso_first <- treatment_iso |> 
  mutate(across(all_of(treat.vars),
      ~ ifelse(sum(.x) > 0, min(year[.x == 1]), 9999),
      .names = "cohort_{.col}"),
      .by = iso3c
    )

cohort.vars <- c("cohort_D_H", "cohort_D_He", "cohort_D_Hs", "cohort_D_HeLs", "cohort_D_LeLs", "cohort_D_HeHs", "cohort_D_LeHs")

treatment_iso_first <- cohort.vars |> 
  purrr::reduce(~ {
    new_var <- paste0(sub("cohort_", "", .y), "_first")
    .x[[new_var]] <- 0
    .x[[new_var]][.x[[.y]] <= .x$year] <- 1
    .x
  }, .init = treatment_iso_first)

# Keep new variables only
treatment_iso_first <- subset(treatment_iso_first, select = -c(D_H:D_multi_int))

```

```{r}

# Label new variables
labelled::var_label() <- list(
   = "",
)

```

```{r}

# Binary staggered 'first' high exposure|severity treatment
panelview(1 ~ ,                   
            main = "t",                   
            by.timing = TRUE,                   
            collapse.history = TRUE,
            pre.post = TRUE,
            data = ,                   
            index = c("iso3c", "year"))

```

### Relative time since first treatment

```{r}

# for each treatment type vars,
# create four new vars:
# ever_treated binary var
# relative time since first treatment var
# short-term first treatment [0-3] binary var
# medium/long-term first treatment [4-5] binary var (2003+5lead;2018-5lag)

treatment_iso_first_rel <- purrr::reduce(cohort.vars, function(data, x) {
  
  ever_treated <- paste0("D_", sub("cohort_D_", "", x), "_ever_treated")
  rel_time <- paste0("D_", sub("cohort_D_", "", x), "_rel_time")
  first_03 <- paste0("D_", sub("cohort_D_", "", x), "_first_03")
  first_45 <- paste0("D_", sub("cohort_D_", "", x), "_first_45")
  first_f6 <- paste0("D_", sub("cohort_D_", "", x), "_first_f6")
  first_l6 <- paste0("D_", sub("cohort_D_", "", x), "_first_l6")

  data |>
    mutate(!!ever_treated := ifelse(.data[[x]]!=9999, 1, 0),
           !!rel_time := ifelse(.data[[x]]!=9999, year - .data[[x]], .data[[x]])) |>
    mutate(!!first_03 := ifelse(.data[[rel_time]] %in% c(0:3), 1, 0),
           !!first_45 := ifelse(.data[[rel_time]] %in% c(4:5), 1, 0)) |> 
    mutate(!!first_f6 := ifelse(.data[[rel_time]] > 5, 1, 0),
           !!first_l6 := ifelse(.data[[rel_time]] < -5, 1, 0))
  
}, .init = treatment_iso_first)

# Keep new variables only
treatment_iso_first_rel <- subset(treatment_iso_first_rel, select = -c(cohort_D_H:D_LeHs_first))

```

### Cumulative staggered

```{r}

treatment_iso_cum <- panel(treatment_iso, ~iso3c+year)

treatment_iso_cum$D_HeLs_cum <- ave(treatment_iso_cum$D_HeLs, treatment_iso_cum$iso3c, FUN = cumsum)

for (var in treat.vars) {
  new_var <- paste0(var, "_cum")
  treatment_iso_cum[[new_var]] <- ave(treatment_iso_cum[[var]], treatment_iso_cum$iso3c, FUN = cumsum)
}

treatment_iso_cum <- subset(treatment_iso_cum, select = -c(D_H:D_multi_int))

```

```{r}

treat.vars.cum <- c("D_HeLs_cum", "D_HeHs_cum", "D_LeLs_cum", "D_LeHs_cum")

for (var in treat.vars.cum) {
  
  new_var <- paste0("gr.", var)
  treatment_iso_cum[[new_var]] <- cut(treatment_iso_cum[[var]], c(0, 1, 5, 15), 
                                      right = F, include.lowest = T, ordered_result = T)
  
}

```

```{r}

# panelView consider cum.treat.vars as continuous vars
# it does not differentiate between not-treated and treated >= 1
```

## Relative treatment paths

```{r}

treat.vars <- c("D_HeLs", "D_LeLs", "D_HeHs", "D_LeHs") 
map(treat.vars, \(x) {   
  # Create the relative treatment time variables 
  treat_path <- treatment_iso |>    
    panel(~iso3c+year) |>    
    group_by(iso3c) |>    
    mutate(     
      l5_D = lag(.data[[x]], n = 6L),     
      l4_D = lag(.data[[x]], n = 5L),     
      l3_D = lag(.data[[x]], n = 4L),     
      l2_D = lag(.data[[x]], n = 3L),     
      l1_D = lag(.data[[x]], n = 2L),     
      t_D = lag(.data[[x]], n = 1L) 
      # f1_D = x, 
      # f2_D = lead(x, n = 1L), 
      # f3_D = lead(x, n = 2L), 
      # f4_D = lead(x, n = 3L), 
      # f5_D = lead(x, n = 4L),   
      )  
  
  # Identify relative treatment time variables 
  rel_treat <- names(treat_path)[str_detect(names(treat_path), "_D$")]  

  # Concatenate these variables into a new variable row-wise 
  treat_path <- treat_path |>   
  rowwise() |>
  mutate(rel_treat_path = paste(c_across(all_of(rel_treat)), collapse = ",")) |>   
  ungroup()  

  # List and count all observed relative treatment paths 
  treat_path |>  
  # only keep obs. treated in t 
  # remove treat.paths w/ NAs   
  filter(t_D==1 & !grepl("NA", rel_treat_path)) |>    
  group_by(rel_treat_path) |>    
  tally() |>    
  arrange(desc(n))    
})
```

## Save

```{r}

save(treatment_iso, treatment_iso_first, treatment_iso_first_rel, treatment_iso_cum, 
     file = here('data', 'data_treatment.RData'))
```
