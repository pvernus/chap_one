---
title: "Data: Treatment"
format: html
editor: visual
---

TO DO:

Compare Total events in GDIS/Emdat vs. High severity events

# Treatment

```{r load_pckg}

source(here::here('scripts', 'library.R'))
```

```{r}

load(here("data", "data_magnitude.RData"))
```

## Treatment types

|          |               |           |               |
|----------|---------------|-----------|---------------|
|          |               | Severity  |               |
|          |               | \< 90 pct | $\geq$ 90 pct |
| Exposure | \< 90 pct     | LeLs      | LeHs          |
|          | $\geq$ 90 pct | HeLs      | HeHs          |

```{r sample_treatment}

# Medium exposure ~ Medium severity 
xtabs(~ D_pop_50 + D_prec_50, treatment)  
# High exposure ~ Medium severity 
xtabs(~ D_pop_90 + D_prec_50, treatment) 
# Medium exposure ~ High severity 
xtabs(~ D_pop_50 + D_prec_90, treatment)  
# High exposure ~ High severity 
xtabs(~ D_pop_90 + D_prec_90, treatment)
```

```{r}

treatment |>    
  summarize(across(c(D_pop_90, D_prec_90), ~ sum(.x, na.rm = T))) |>    
  rowwise() |>    
  mutate(total = sum(c(D_pop_90, D_prec_90), na.rm = T))  

treatment |>    
  summarize(across(c(D_pop_90, D_prec_90), ~ sum(.x, na.rm = T)),             
            .by = year) |>    
  rowwise(year) |>    
  mutate(total = sum(c(D_pop_90, D_prec_90), na.rm = T))  

treatment |>    
  summarize(across(c(D_pop_90, D_prec_90), ~ sum(.x, na.rm = T)),             
            .by = iso3c) |>    
  rowwise(iso3c) |>    
  mutate(total = sum(c(D_pop_90, D_prec_90), na.rm = T))
```

```{r treatment_iso}

treatment_iso <- treatment |>    
  mutate(
    D_H = ifelse(D_pop_90 == 1 | D_prec_90 == 1, 1, 0),
    D_He = ifelse(D_pop_90 == 1, 1, 0),
    D_Hs = ifelse(D_prec_90 == 1, 1, 0),
    D_HeLs = ifelse(D_pop_90 == 1 & D_prec_90 == 0, 1, 0),     
    D_LeLs = ifelse(D_pop_90 == 0 & D_prec_90 == 0, 1, 0),     
    D_HeHs = ifelse(D_pop_90 == 1 & D_prec_90 == 1, 1, 0),     
    D_LeHs = ifelse(D_pop_90 == 0 & D_prec_90 == 1, 1, 0)     
    ) |>    
  mutate(     
    D_multi = factor(case_when(         
      D_pop_90 == 1 & D_prec_90 == 0 ~ "He_Ls",         
      D_pop_90 == 1 & D_prec_90 == 1 ~ "He_Hs",         
      D_pop_90 == 0 & D_prec_90 == 0 ~ "Le_Ls",         
      D_pop_90 == 0 & D_prec_90 == 1 ~ "Le_Hs",         
      .default = NA_character_     
      ), levels = c("He_Ls", "He_Hs", "Le_Ls", "Le_Hs")),     
    D_multi_int = as.integer(D_multi)     ) |>    
  dplyr::select(-contains(c("pop", "prec")))

```

```{r}

# Label new variables
labelled::var_label(treatment_iso) <- list(
  D_H = "High exposure or high severity extreme event (binary)",
  D_He = "High exposure extreme event (binary)",
  D_Hs = "High severity extreme event (binary)",
  D_HeLs = "High exposure/low severity extreme event (binary)",
  D_LeLs = "Low exposure/low severity extreme event (binary)",
  D_HeHs = "High exposure/high severity extreme event (binary)",
  D_LeHs = "Low exposure/high severity extreme event (binary)",
  D_multi = "Disastrous extreme event type (categorical)",
  D_multi_int = "Disastrous extreme event type (numeric)"
)

```

```{r}

treatment_iso |>    
  summarize(across(D_HeLs:D_LeHs, ~ sum(.x, na.rm = T))) |>    
  rowwise() |>    
  mutate(total = sum(c_across(D_HeLs:D_LeHs), na.rm = T))  

treatment_iso |>    
  summarize(across(D_HeLs:D_LeHs, ~ sum(.x, na.rm = T)),             
            .by = year) |>    
  rowwise(year) |>    
  mutate(total = sum(c_across(D_HeLs:D_LeHs), na.rm = T))  

treatment_iso |>    
  summarize(across(D_HeLs:D_LeHs, ~ sum(.x, na.rm = T)),             
            .by = iso3c) |>    
  rowwise(iso3c) |>    
  mutate(total = sum(c_across(D_HeLs:D_LeHs), na.rm = T))
```

```{r treat.status_H}

panelview(1 ~ D_H, data = treatment_iso,           
          index = c("iso3c","year"),      
          by.timing = TRUE,                   
          collapse.history = TRUE,
          background = "white"           
          )

```

```{r treat.status_type}

# binary treatment status 
variables <- c("D_HeLs", "D_HeHs", "D_LeLs", "D_LeHs") 

panel.bin <- variables |>      
  map(~ panelview(as.formula(paste("1 ~", .x)),                   
                  main = paste("Panel View:", .x),                   
                  by.timing = TRUE,                   
                  collapse.history = TRUE,
                  data = treatment_iso,                   
                  index = c("iso3c", "year")))   

# multinomial treatment status 
mycol<-c("#73AE80", "#2A5A5B", "#E8E8E8", "#6C83B5") 
panelview(1 ~ D_multi_int, data = treatment_iso,           
          index = c("iso3c","year"),           
          legend.labs = c("He_Ls", "He_Hs", "Le_Ls", "Le_Hs"),           
          color = mycol, background = "white"           
          ) 

```

```{r treat.freq}

## Frequency by year  
treatment_iso |>    
  mutate(year=factor(year),          
         D_multi=fct_relevel(D_multi, "He_Ls", after = 1)) |>    
  filter(D_multi != "Le_Ls") |>    
  ggplot(aes(x=year, fill = D_multi)) +   
  geom_bar() +   
  scale_fill_manual(values = mycol[c(2,1,4)]) +   
  labs(y = "Frequency", fill = "Event type") +   
  theme_light()  

## Frequency by country  
# Calculate the total frequency of each iso3c 
# Pull ordered list of countries 
frequency_order <- treatment_iso |>   
  filter(D_multi != "Le_Ls") |>   
  count(iso3c, sort = TRUE) |>   
  pull(iso3c)  

# Plot with x-axis ordered by total frequency 
treatment_iso |>   
  mutate(year = factor(year),          
         D_multi = fct_relevel(D_multi, "He_Ls", after = 1)) |>   
  filter(D_multi != "Le_Ls") |>   
  # Reorder iso3c by frequency
  mutate(iso3c = fct_rev(factor(iso3c, levels = frequency_order))) |>  
  ggplot(aes(x = iso3c, fill = D_multi)) +   
  geom_bar() +   
  scale_fill_manual(values = mycol[c(2, 1, 4)]) +   
  labs(x = "Country", y = "Frequency", fill = "Event type") +   
  coord_flip() +   
  theme_light()
# Facet by region?
```

## Treatment assignments

Currently, non-absorbing staggered multiple treatments (on-and-off / scenarios).

### First-treatment staggered

```{r}

treat.vars <- c("D_H", "D_He", "D_Hs", "D_HeLs", "D_LeLs", "D_HeHs", "D_LeHs")

treatment_iso_first <- treatment_iso |> 
  mutate(across(all_of(treat.vars),
      ~ ifelse(sum(.x) > 0, min(year[.x == 1]), 9999),
      .names = "cohort_{.col}"),
      .by = iso3c
    )

cohort.vars <- c("cohort_D_H", "cohort_D_He", "cohort_D_Hs", "cohort_D_HeLs", "cohort_D_LeLs", "cohort_D_HeHs", "cohort_D_LeHs")

treatment_iso_first <- cohort.vars |> 
  purrr::reduce(~ {
    new_var <- paste0(sub("cohort_", "", .y), "_first")
    .x[[new_var]] <- 0
    .x[[new_var]][.x[[.y]] <= .x$year] <- 1
    .x
  }, .init = treatment_iso_first)

# Keep new variables only
treatment_iso_first <- subset(treatment_iso_first, select = -c(D_H:D_multi_int))

```

```{r}

# Label new variables
labelled::var_label(treatment_iso_first) <- list(
  cohort_D_H = "First treatment year, high exposure or high severity event",
  cohort_D_He = "First treatment year, high exposure event",
  cohort_D_Hs = "First treatment year, high severity event",
  cohort_D_HeLs = "First treatment year, high exposure / low severity event",
  cohort_D_LeLs = "First treatment year, low exposure / low severity event",
  cohort_D_HeHs = "First treatment year, high exposure / high severity event",
  cohort_D_LeHs = "First treatment year, low exposure / high severity event",
  D_H_first = "First high exposure / high severity extreme event (binary)",
  D_He_first = "First high exposure extreme event (binary)",
  D_Hs_first = "First high severity extreme event (binary)",
  D_HeLs_first = "First high exposure / low severity extreme event (binary)",
  D_LeLs_first = "First low exposure / low severity extreme event (binary)",
  D_HeHs_first = "First high exposure / high severity extreme event (binary)",
  D_LeHs_first = "First low exposure / high severity extreme event (binary)"
)

```

```{r}

# Binary staggered 'first' high exposure|severity treatment
panelview(1 ~ D_H_first,                   
            main = "Staggered 'first' high exposure|severity treatment",                   
            by.timing = TRUE,                   
            collapse.history = TRUE,
            pre.post = TRUE,
            data = treatment_iso_first,                   
            index = c("iso3c", "year"))

# Binary staggered 'first' high exposure
panelview(1 ~ D_He_first,                   
            main = "Staggered 'first' high exposure treatment",                   
            by.timing = TRUE,                   
            collapse.history = TRUE,
            pre.post = TRUE,
            data = treatment_iso_first,                   
            index = c("iso3c", "year"))

# Binary staggered 'first' high severity treatment
panelview(1 ~ D_Hs_first,                   
            main = "Staggered 'first' high severity treatment",                   
            by.timing = TRUE,                   
            collapse.history = TRUE,
            pre.post = TRUE,
            data = treatment_iso_first,                   
            index = c("iso3c", "year"))

# binary staggered 'first treatment' treatment status 
treat.vars.first <- c("D_HeLs_first", "D_HeHs_first", "D_LeLs_first", "D_LeHs_first") 

panel.bin <- treat.vars.first |>      
  map(~ panelview(as.formula(paste("1 ~", .x)),                   
                  main = paste("Panel View:", .x),                   
                  by.timing = TRUE,                   
                  collapse.history = TRUE,
                  pre.post = TRUE,
                  data = treatment_iso_first,                   
                  index = c("iso3c", "year")))

```

### Relative time since first treatment

```{r}

# for each treatment type vars,
# create four new vars:
# ever_treated binary var
# relative time since first treatment var
# short-term first treatment [0-3] binary var
# medium/long-term first treatment [4-5] binary var (2003+5lead;2018-5lag)

treatment_iso_first_rel <- purrr::reduce(cohort.vars, function(data, x) {
  
  ever_treated <- paste0("D_", sub("cohort_D_", "", x), "_ever_treated")
  rel_time <- paste0("D_", sub("cohort_D_", "", x), "_rel_time")
  first_03 <- paste0("D_", sub("cohort_D_", "", x), "_first_03")
  first_45 <- paste0("D_", sub("cohort_D_", "", x), "_first_45")
  first_f6 <- paste0("D_", sub("cohort_D_", "", x), "_first_f6")
  first_l6 <- paste0("D_", sub("cohort_D_", "", x), "_first_l6")

  data |>
    mutate(!!ever_treated := ifelse(.data[[x]]!=9999, 1, 0),
           !!rel_time := ifelse(.data[[x]]!=9999, year - .data[[x]], .data[[x]])) |>
    mutate(!!first_03 := ifelse(.data[[rel_time]] %in% c(0:3), 1, 0),
           !!first_45 := ifelse(.data[[rel_time]] %in% c(4:5), 1, 0)) |> 
    mutate(!!first_f6 := ifelse(.data[[rel_time]] > 5, 1, 0),
           !!first_l6 := ifelse(.data[[rel_time]] < -5, 1, 0))
  
}, .init = treatment_iso_first)

# Keep new variables only
treatment_iso_first_rel <- subset(treatment_iso_first_rel, select = -c(cohort_D_H:D_LeHs_first))

```

```{r}

# Label new variables
labelled::var_label(treatment_iso_first_rel) <- list(
  # ever treated
  D_H_ever_treated = "",
  D_HeLs_ever_treated = "",
  D_LeLs_ever_treated = "",
  D_HeHs_ever_treated = "",
  D_LeHs_ever_treated = "",
  # relative time since first treatment
  D_H_rel_time = "",
  D_HeLs_rel_time = "",
  D_LeLs_rel_time = "",
  D_HeHs_rel_time = "",
  D_LeHs_rel_time = "",
  # first treatment <= 3 years
  D_H_first_03 = "",
  D_HeLs_first_03 = "",
  D_LeLs_first_03 = "",
  D_HeHs_first_03 = "",
  D_LeHs_first_03 = "",
  # first treatment %in% 4-5 years
  D_H_first_45 = "",
  D_HeLs_first_45 = "",
  D_LeLs_first_45 = "",
  D_HeHs_first_45 = "",
  D_LeHs_first_45 = "",
  # first treatment < 5 year
  D_H_first_l6 = "",
  D_H_first_l6 = "",
  D_LeLs_first_l6 = "",
  D_HeHs_first_l6 = "",
  D_LeHs_first_l6 = "",
  # first treatment > 5 years
  D_H_first_f6 = "",
  D_HeLs_first_f6 = "",
  D_LeLs_first_f6 = "",
  D_HeHs_first_f6 = "",
  D_LeHs_first_f6 = ""
)

```

### Cumulative staggered

```{r}

treatment_iso_cum <- panel(treatment_iso, ~iso3c+year)

treatment_iso_cum$D_HeLs_cum <- ave(treatment_iso_cum$D_HeLs, treatment_iso_cum$iso3c, FUN = cumsum)

for (var in treat.vars) {
  new_var <- paste0(var, "_cum")
  treatment_iso_cum[[new_var]] <- ave(treatment_iso_cum[[var]], treatment_iso_cum$iso3c, FUN = cumsum)
}

treatment_iso_cum <- subset(treatment_iso_cum, select = -c(D_H:D_multi_int))

```

```{r}

treat.vars.cum <- c("D_HeLs_cum", "D_HeHs_cum", "D_LeLs_cum", "D_LeHs_cum")

for (var in treat.vars.cum) {
  
  new_var <- paste0("gr.", var)
  treatment_iso_cum[[new_var]] <- cut(treatment_iso_cum[[var]], c(0, 1, 5, 15), 
                                      right = F, include.lowest = T, ordered_result = T)
  
}

```

```{r}

# panelView consider cum.treat.vars as continuous vars
# it does not differentiate between not-treated and treated >= 1
```

## Relative treatment paths

```{r}

treat.vars <- c("D_HeLs", "D_LeLs", "D_HeHs", "D_LeHs") 
map(treat.vars, \(x) {   
  # Create the relative treatment time variables 
  treat_path <- treatment_iso |>    
    panel(~iso3c+year) |>    
    group_by(iso3c) |>    
    mutate(     
      l5_D = lag(.data[[x]], n = 6L),     
      l4_D = lag(.data[[x]], n = 5L),     
      l3_D = lag(.data[[x]], n = 4L),     
      l2_D = lag(.data[[x]], n = 3L),     
      l1_D = lag(.data[[x]], n = 2L),     
      t_D = lag(.data[[x]], n = 1L) 
      # f1_D = x, 
      # f2_D = lead(x, n = 1L), 
      # f3_D = lead(x, n = 2L), 
      # f4_D = lead(x, n = 3L), 
      # f5_D = lead(x, n = 4L),   
      )  
  
  # Identify relative treatment time variables 
  rel_treat <- names(treat_path)[str_detect(names(treat_path), "_D$")]  

  # Concatenate these variables into a new variable row-wise 
  treat_path <- treat_path |>   
  rowwise() |>
  mutate(rel_treat_path = paste(c_across(all_of(rel_treat)), collapse = ",")) |>   
  ungroup()  

  # List and count all observed relative treatment paths 
  treat_path |>  
  # only keep obs. treated in t 
  # remove treat.paths w/ NAs   
  filter(t_D==1 & !grepl("NA", rel_treat_path)) |>    
  group_by(rel_treat_path) |>    
  tally() |>    
  arrange(desc(n))    
})
```

## Save

```{r}

save(treatment_iso, treatment_iso_first, treatment_iso_first_rel, treatment_iso_cum, 
     file = here('data', 'data_treatment.RData'))
```
