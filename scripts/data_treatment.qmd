---
title: "Data: Treatment"
format: html
editor: visual
---

```{r load_pckg}

source(here::here('scripts', 'library.R'))
```

```{r load.data_magnitude}

# load(here("data", "data_magnitude.RData"))
load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\treatment\\data_severity.RData")
```

# Sample

```{r indice_event_type}

# select baseline indices and percentile
indice_base <- c("rx1d", "rx90d", "tmax1d", "wmean1d")
percentile_base <- c("p5", "p95")
year_base <- 2001:2018

# define event types
## onset
fast_onset <- c("flood", "storm")
slow_onset <- c("drought", "extreme temperature")
## physical
hydro <- "flood"
meteo <- "storm"
clim <- c("drought", "extreme temperature")

# define indice parameters
df <- data_severity |>
# filter indice and percentile  
  filter(indice %in% indice_base) |> 
  filter(percentile %in% percentile_base) |> 
# filter year
  filter(year %in% year_base) |> 
# filter disaster year only
  filter(year==year_dis)

```

```{r}

cols <- c("drought" = "#9E3D22FF", "extreme temperature" = "#F69035FF", "flood" = "#77ACD3FF", "storm" = "#2B5C8AFF")

df |> 
  summarize(n = length(disasterno), .by = c(year, disaster_type_gdis)) |> 
  arrange(year) |> 
  ggplot(aes(x = year, y = n, fill = disaster_type_gdis)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = cols) +
  theme_light() +
  labs(x="Year", y = "Frequency", fill = "Type",
       title = "Climate-related disasters across time",
       caption = "Source: GDIS")
```

```{r density_disaster_type}
#| eval: false

ggplot(df, aes(x=value, group=disaster_type_gdis)) +
  geom_density(aes(fill=disaster_type_gdis), alpha=.6) +
  facet_wrap(~disaster_type_gdis) + 
  theme_light()
```

## All

```{r}

df.dis <- df |> 
  summarize(
    # frequency
    freq_dis = length(unique(disasterno)), # disaster
    freq_adm = length(unique(geo_id)), # ADM-affected by disaster
    # agg severity index at country-year level
    value_max = max(value, na.rm = T),
    value_sum = sum(value, na.rm = T),    
    .by = c("iso3c", "year")
  )
```

## Speed onset

```{r}

# aggregate at country-year level
df.dis.onset <- df |> 
  summarize(
    ## freq. by onset event type
    freq_dis_fast = length(unique(disasterno[disaster_type_gdis %in% fast_onset])), # fast-onset
    freq_adm_fast = length(unique(geo_id[disaster_type_gdis %in% fast_onset])),
    freq_dis_slow = length(unique(disasterno[disaster_type_gdis %in% slow_onset])), # slow_onset
    freq_adm_slow = length(unique(geo_id[disaster_type_gdis %in% slow_onset])),
    ## index by onset event type
    value_max_fast = max(value[disaster_type_gdis %in% fast_onset], na.rm = T), # fast-onset
    value_sum_fast = sum(value[disaster_type_gdis %in% fast_onset], na.rm = T),
    value_max_slow = max(value[disaster_type_gdis %in% slow_onset], na.rm = T), # slow-onset
    value_sum_slow = sum(value[disaster_type_gdis %in% slow_onset], na.rm = T),
    .by = c("iso3c", "year")
  ) |> 
  mutate(across(starts_with("value"), ~ if_else(. == -Inf | . == 0, NA_real_, .)))
```

## Physical chars

```{r data_treat}

# aggregate at country-year level
df.dis.phy <- df |> 
  summarize(
    ## freq. by physical event type
    freq_dis_hydro = length(unique(disasterno[disaster_type_gdis %in% hydro])), # hydro
    freq_adm_hydro = length(unique(geo_id[disaster_type_gdis %in% hydro])),
    freq_dis_meteo = length(unique(disasterno[disaster_type_gdis %in% meteo])), # meteo
    freq_adm_meteo = length(unique(geo_id[disaster_type_gdis %in% meteo])),
    freq_dis_clim = length(unique(disasterno[disaster_type_gdis %in% clim])), # clim
    freq_adm_clim = length(unique(geo_id[disaster_type_gdis %in% clim])),
    ## index by physical event type
    value_max_hydro = max(value[disaster_type_gdis %in% hydro], na.rm = T), # hydro
    value_sum_hydro = sum(value[disaster_type_gdis %in% hydro], na.rm = T),
    value_max_meteo = max(value[disaster_type_gdis %in% meteo], na.rm = T), # meteo
    value_sum_meteo = sum(value[disaster_type_gdis %in% meteo], na.rm = T),
    value_max_clim = max(value[disaster_type_gdis %in% clim], na.rm = T), # clim
    value_sum_clim = sum(value[disaster_type_gdis %in% clim], na.rm = T),
    .by = c("iso3c", "year")
  ) |> 
  mutate(across(starts_with("value"), ~ if_else(. == -Inf | . == 0, NA_real_, .)))

```

## Merge

```{r data_treat}

# load list recipient iso3c
load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_unit.RData")

# merge treatment vars to sample
data_treat <- left_join(data_iso3c_year, df.dis, by = c("iso3c", "year")) |> 
  left_join(df.dis.onset, by = c("iso3c", "year")) |> 
  left_join(df.dis.phy, by = c("iso3c", "year")) |>
  mutate_all(replace_na, 0) |> 
  # create event-year dummies
  mutate(
    # all
    dis_dummy = ifelse(freq_dis>0, 1, 0),
    # onset
    dis_fast_dummy = ifelse(freq_dis_fast>0, 1, 0), 
    dis_slow_dummy = ifelse(freq_dis_slow>0, 1, 0),
    # physical
    dis_hydro_dummy = ifelse(freq_dis_hydro>0, 1, 0), 
    dis_meteo_dummy = ifelse(freq_dis_meteo>0, 1, 0), 
    dis_clim_dummy = ifelse(freq_dis_clim>0, 1, 0)
    )
```

```{r}
#| eval: false

load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\covariate\\data_covariate.RData")

df <- merge(data_treat, data_region, by = "iso3c")

df |> 
  select(country, region = region_agg, year, dis_dummy) |> 
  summarize(
    year = max(year) - min(year) + 1,
    freq = sum(dis_dummy, na.rm = T),
    .by = c(region, country)
  ) |> 
  mutate(prop = freq/year) |> 
  mutate(country = tidytext::reorder_within(country, prop, region)) |> 
  slice_max(prop, n=10, by = region) |> 
  ggplot(aes(country, prop, fill = region)) +
    geom_col(show.legend = FALSE) +
    facet_wrap(~region, scales = "free_y") +
    coord_flip() +
    tidytext::scale_x_reordered() +
  labs(x = "Country",
       title = "Top 10 country exposure to climate-related disasters, by region, 2000-2018",
       subtitle = "Fraction of years with at least a disaster (i.e., treated periods) over all years",
       caption = "Source: GDIS") +
  theme_classic()
```

# Rank (intensity)

```{r rank}

data_treat |> 
  select(iso3c, year, freq_dis, value_max) |> 
#  filter(freq_dis>0) |> 
  ggplot(aes(x = value_max, group = year)) +
  geom_density(alpha=.6) +
  facet_wrap(~ year)

quantile(data_treat$value_max[data_treat$freq_dis>0], probs = c(0, 0.25, 0.5, 0.75, 1))
quantile(data_treat$value_max[data_treat$freq_dis>0], probs = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1))

```

## All

```{r df.rank}

df.rank <- data_treat |> 
  select(iso3c, year, freq_dis, value_max) |> 
  mutate(
    quantile_rank = ntile(ifelse(freq_dis>0, value_max, NA_real_), 4),
    decile_rank = ntile(ifelse(freq_dis>0, value_max, NA_real_), 10)
    ) |> 
  select(-c(starts_with("freq"), starts_with("value")))
```

## Speed onset

```{r df.rank.onset}

df.rank.onset <- data_treat |> 
  select(iso3c, year, freq_dis_fast, freq_dis_slow, value_max_fast, value_max_slow) |> 
  mutate(
    # fast-onset
    quantile_rank_fast = ntile(ifelse(freq_dis_fast>0, value_max_fast, NA_real_), 4),
    decile_rank_fast = ntile(ifelse(freq_dis_fast>0, value_max_fast, NA_real_), 10),
    # slow-onset
    quantile_rank_slow = ntile(ifelse(freq_dis_slow>0, value_max_slow, NA_real_), 4),
    decile_rank_slow = ntile(ifelse(freq_dis_slow>0, value_max_slow, NA_real_), 10), 
    ) |> 
  select(-c(starts_with("freq"), starts_with("value")))
```

## Physical chars

```{r df.rank.phy}

df.rank.phy <- data_treat |> 
  select(iso3c, year, freq_dis_hydro, freq_dis_meteo, freq_dis_clim, value_max_hydro, value_max_meteo, value_max_clim) |> 
  mutate(
    # hydro
    quantile_rank_hydro = ntile(ifelse(freq_dis_hydro>0, value_max_hydro, NA_real_), 4),
    decile_rank_hydro = ntile(ifelse(freq_dis_hydro>0, value_max_hydro, NA_real_), 10),
    # meteo
    quantile_rank_meteo = ntile(ifelse(freq_dis_meteo>0, value_max_meteo, NA_real_), 4),
    decile_rank_meteo = ntile(ifelse(freq_dis_meteo>0, value_max_meteo, NA_real_), 10),
    # clim
    quantile_rank_clim = ntile(ifelse(freq_dis_clim>0, value_max_clim, NA_real_), 4),
    decile_rank_clim = ntile(ifelse(freq_dis_clim>0, value_max_clim, NA_real_), 10),    
    ) |> 
  select(-c(starts_with("freq"), starts_with("value")))
```

## Merge

```{r data_treat_rank}

data_treat_rank <- left_join(data_iso3c_year, df.rank, by = c("iso3c", "year")) |> 
  left_join(df.rank.onset, by = c("iso3c", "year")) |> 
  left_join(df.rank.phy, by = c("iso3c", "year"))
```

# Multiple treatments of identical intensities (binary)

## Treatment paths

```{r treat.status}

# All
panelview(1 ~ dis_dummy, data = data_treat,           
          index = c("iso3c","year"),
          axis.lab = "time",
          by.timing = TRUE,                   
          background = "white",
          main = "All climate-related disasters",
          ylab = "country"
          )

## Speed onset
# Define the list of variables
list_dis_onset <- list("dis_fast_dummy", "dis_slow_dummy")

# Apply panelview to each variable in the list
panelview_onset <- list_dis_onset |>
  map(\(x) panelview(as.formula(paste("1 ~", x)), 
                     data = data_treat,
                     index = c("iso3c", "year"),
                     axis.lab = "time",
                     by.timing = TRUE,
                     background = "white",
                     main = "Treatment Status")
      )

## Physical chars
# Define the list of variables
list_dis_phy <- list("dis_hydro_dummy", "dis_meteo_dummy", "dis_clim_dummy")

# Apply panelview to each variable in the list
panelview_phy <- list_dis_phy |>
  map(\(x) panelview(as.formula(paste("1 ~", x)), 
                     data = data_treat,
                     index = c("iso3c", "year"),
                     axis.lab = "time",
                     by.timing = TRUE,
                     background = "white",
                     main = "Treatment Status")
      )

# NOTE: non-absorbing and multiple (with switching on/off) treatment
```

## Threshold effect window

```{r rel_time_treshold_multiple}

df <- select(data_treat, iso3c, year, ends_with("dummy")) |> 
  pivot_longer(cols = -c(iso3c, year), names_to = "dis", values_to = "treat")

df |> 
  split(df$dis) |> 
  map(\(df) get.cohort(data = as.data.frame(df), D = 'treat',index = c("iso3c","year"))) |> 
  map(\(df) summarize(df, freq = n(), .by = "Time_to_Treatment") |> 
        arrange(Time_to_Treatment) |> 
        filter(!is.na(Time_to_Treatment)) |> 
        mutate(prop = freq/max(freq)) |> 
        ggplot(aes(x=Time_to_Treatment, y=prop)) +
        geom_bar(stat = "identity", fill = "grey") +
        geom_hline(yintercept = .3, linetype="dotted", colour="red") +
        theme_minimal()
        )

# further customization: add text above hline ("threshold: .3") + fill different color bars above threshold.

# following Liu, Wang, and Xu (2024), plot only those periods whose number of treated observations exceeds a threshold, which is set as a proportion of the largest number of treated observations in a period (the default is proportion = 0.3).

```

```{r treat.freq}

## Proportions by year 
summarize(data_treat, 
          treat = mean(dis_dummy),
          no_treat = 1 - mean(dis_dummy),
            .by = year) |> 
  pivot_longer(cols = c(treat, no_treat),
               names_to = "status", values_to = "proportion") |> 
  ggplot(aes(x = factor(year), y = proportion, fill = status)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = round(proportion, 2)), 
            position = position_stack(vjust = 0.5), 
            size = 3) +
  labs(title = "",
       x = "Year",
       y = "%",
       fill = "Status") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# NOTE: declining proportions of treated countries in the last periods. Maybe due to reporting bias.

## Proportions by country 
summarize(data_treat, 
          prop_treat = mean(dis_dummy),
          prop_no_treat = 1 - mean(dis_dummy),
            .by = iso3c) |> 
  arrange(desc(prop_treat))
```

# Single treatments of identical intensities (binarize-and-staggerize)

## Cohorts

```{r data_treat_cohort}

# create cohort variable
## by event type 
data_treat_cohort_type <- data_treat |> 
  select(iso3c, year, ends_with("dummy")) |> 
  mutate(across(ends_with("dummy"), ~ ifelse(sum(.x) > 0, min(year[.x == 1]), 9999), .names = "cohort_{.col}"), 
         .by = iso3c) |> 
  rename_with(~ sub("_dummy$", "", .), starts_with("cohort")) |> 
  select(iso3c, year, contains("cohort"))

## for top quantile/decile
data_treat_cohort_rank <- data_treat_rank |> 
  mutate(across(starts_with("quantile"), ~ ifelse(.x==4, 1, 0), .names = "top_{.col}_dummy")) |> 
  mutate(across(starts_with("decile"), ~ ifelse(.x==10, 1, 0), .names = "top_{.col}_dummy")) |> 
  mutate(across(starts_with("top"), ~ ifelse(sum(.x, na.rm = T) > 0, min(year[.x == 1], na.rm = T), 9999), 
                .names = "cohort_{.col}"),
         .by = iso3c) |> 
  rename_with(~ sub("_dummy$", "", sub("rank_", "", .)), starts_with("cohort")) |>
  select(iso3c, year, contains("cohort"))

# merge
data_treat_cohort <- left_join(data_treat_cohort_type, data_treat_cohort_rank, by = c("iso3c", "year"))
```

```{r}
#| eval: false

# retrieve cohort vars
cohort_vars <- names(data_treat_cohort)[startsWith(names(data_treat_cohort), "cohort")]
# Create a list to store the results
results_list <- list()
# Loop through each cohort variable and apply the summarize and arrange functions
for (var in cohort_vars) {
  result <- data_treat_cohort |> 
    summarize(freq_country = length(unique(iso3c)), .by = !!sym(var)) %>%
    arrange(!!sym(var))

  # Store the result in the list
  results_list[[var]] <- result
}
# Print the results
print(results_list)
```

## Staggered binary vars

```{r data_treat_first}

# create dummy vars first-treatment
data_treat_first <- data_treat_cohort |> 
  mutate(across(starts_with("cohort"), ~ ifelse(year >= .x, 1, 0), 
                .names = "first_treat_{.col}")) |> 
  rename_with(~ sub("cohort_", "", .), starts_with("first_treat")) |> 
  select(iso3c, year, contains("first_treat"))

```

## Treatment paths

```{r}
#| eval: false

## all
panelview(data = data_treat_first,
          1 ~ first_treat_dis,
          index = c("iso3c", "year"), 
          axis.lab = "time",
          by.timing = TRUE,
          background = "white",
          main = "Treatment Status")

## Speed onset
# Define the list of variables
list_first_onset <- list("first_treat_dis_fast", "first_treat_dis_slow")

# Apply panelview to each variable in the list
panelview_onset <- list_first_onset |>
  map(\(x) panelview(as.formula(paste("1 ~", x)), 
                     data = data_treat_first,
                     index = c("iso3c", "year"),
                     axis.lab = "time",
                     by.timing = TRUE,
                     background = "white",
                     main = "Treatment Status")
      )

## Physical chars
# Define the list of variables
list_first_phy <- list("first_treat_dis_hydro", "first_treat_dis_meteo", "first_treat_dis_clim")

# Apply panelview to each variable in the list
panelview_onset <- list_first_phy |>
  map(\(x) panelview(as.formula(paste("1 ~", x)), 
                     data = data_treat_first,
                     index = c("iso3c", "year"),
                     axis.lab = "time",
                     by.timing = TRUE,
                     background = "white",
                     main = "Treatment Status")
      )
```

```{r label_vars}

# Label new variables
# labelled::var_label() <- list( = "")
```

## Threshold effect window

```{r rel_time_treshold_single}
#| eval: false

df <- select(data_treat_first, iso3c, year, starts_with("first_treat_dis")) |> 
  pivot_longer(cols = -c(iso3c, year), names_to = "dis", values_to = "treat")

df |> 
  split(df$dis) |> 
  map(\(df) get.cohort(data = as.data.frame(df), D = 'treat',index = c("iso3c","year"))) |> 
  map(\(df) summarize(df, freq = n(), .by = "Time_to_Treatment") |> 
        arrange(Time_to_Treatment) |> 
        filter(!is.na(Time_to_Treatment)) |> 
        mutate(prop = freq/max(freq)) |> 
        ggplot(aes(x=Time_to_Treatment, y=prop)) +
        geom_bar(stat = "identity", fill = "grey") +
        geom_hline(yintercept = .3, linetype="dotted", colour="red") +
        theme_minimal()
        )

# further customization: add text above hline ("threshold: .3") + fill different color bars above threshold.

# following Liu, Wang, and Xu (2024), plot only those periods whose number of treated observations exceeds a threshold, which is set as a proportion of the largest number of treated observations in a period (the default is proportion = 0.3).
```

## Relative time since first treatment

```{r data_treat_rel_time}

data_treat_rel_time <- data_treat_cohort|> 
  mutate(across(starts_with("cohort"), ~ ifelse(.x %in% 2001:2018, year - .x, -1000), 
                .names = "rel_time_{.col}")) |> 
  rename_with(~ sub("cohort_", "", .), starts_with("rel_time")) |> 
  select(iso3c, year, contains("rel_time"))
```

# Save

```{r save}

save(data_treat, data_treat_rank, data_treat_cohort, data_treat_first, data_treat_rel_time,
     file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\treatment\\data_treatment.RData")
```
