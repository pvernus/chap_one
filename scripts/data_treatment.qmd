---
title: "Data: Treatment"
format: html
editor: visual
---

# Treatment

```{r load_pckg}

source(here::here('scripts', 'library.R'))
```

```{r load.data_magnitude}

# load(here("data", "data_magnitude.RData"))
load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\treatment\\data_severity.RData")

data_magnitude <- data_severity
```

## Sample

### All climate-related events

```{r data_treat}

# select baseline indices and percentile
indice_base <- c("rx1d", "rx90d", "tmax1d", "wmean1d")
percentile_base <- c("p5", "p95")
year_base <- 2001:2018

df <- data_magnitude |>
# filter indice and percentile  
  filter(indice %in% indice_base) |> 
  filter(percentile %in% percentile_base) |> 
# filter year
  filter(year %in% year_base) |> 
# filter disaster year only
  filter(year==year_dis)

# aggregate at country-year level
data_dis <- df |> 
  summarize(
    freq_dis = length(unique(disasterno)),
    freq_adm = length(unique(geo_id)),
    freq_adm_large = sum(severe_large),
    value_avg = mean(value),
    value_large = mean(value[severe_large == 1], na.rm = TRUE),
    .by = c("iso3c", "year")
  ) |> 
  replace_na(list(value_large = 0))

# load list recipient iso3c
load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_unit.RData")

# define unit and time sample
data_unit <- data_iso3c |> 
  expand(iso3c, year_base) |> 
  rename(year = year_base)

# merge treatment vars to sample
data_treat <- left_join(data_unit, data_dis, by = c("iso3c", "year")) |> 
  mutate_all(replace_na, 0) |> 
  mutate(
    dis_dummy = ifelse(freq_dis>0, 1, 0),
    dis_large_dummy = ifelse(freq_adm_large>0, 1, 0)
  )
```

### Fast-onset and slow-onset climate-related events

```{r data_treat_fast.slow}

fast_onset <- c("flood", "storm")
slow_onset <- c("drought", "extreme temperature")

# fast-onset
df_fast <- filter(df, disaster_type_gdis %in% fast_onset)
# slow-onset
df_slow <- filter(df, disaster_type_gdis %in% slow_onset)

# Define the processing function
process_data <- function(df) {
  df |>
    summarize(
      freq_dis = length(unique(disasterno)),
      freq_adm = length(unique(geo_id)),
      freq_adm_large = sum(severe_large),
      value_avg = mean(value),
      value_large = mean(value[severe_large == 1], na.rm = TRUE),
      .by = c("iso3c", "year")
    ) |>
    replace_na(list(value_large = 0))
}

# List of dataframes
df_list <- list(df_fast = df_fast, df_slow = df_slow)

# Process each dataframe using purrr::map
data_treat_list <- map(df_list, ~ {
  data_dis <- process_data(.x)
  left_join(data_unit, data_dis, by = c("iso3c", "year")) |>
    mutate_all(replace_na, 0) |>
    mutate(
      dis_dummy = ifelse(freq_dis > 0, 1, 0),
      dis_large_dummy = ifelse(freq_adm_large > 0, 1, 0)
    )
})

# Retrieve results
data_treat_fast <- data_treat_list$df_fast
data_treat_slow <- data_treat_list$df_slow

```

## Treatment paths

```{r treat.status}

panelview(1 ~ dis_dummy, data = data_treat,           
          index = c("iso3c","year"),
          axis.lab = "time",
          by.timing = TRUE,                   
          background = "white",
          main = "Treatment Status: All events"
          )

panelview(1 ~ dis_large_dummy, data = data_treat,           
          index = c("iso3c","year"),
          axis.lab = "time",
          by.timing = TRUE,                   
          background = "white",
          main = "Treatment Status: Large events only"
          )

# NOTE: non-absorbing and multiple (with switching on/off) treatment
```

## Share of treated countries by year

```{r treat.freq}

## Proportions by year 
summarize(data_treat, 
          treat = mean(dis_dummy),
          no_treat = 1 - mean(dis_dummy),
            .by = year) |> 
  pivot_longer(cols = c(treat, no_treat),
               names_to = "status", values_to = "proportion") |> 
  ggplot(aes(x = factor(year), y = proportion, fill = status)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = round(proportion, 2)), 
            position = position_stack(vjust = 0.5), 
            size = 3) +
  labs(title = "",
       x = "Year",
       y = "%",
       fill = "Status") +
  theme_minimal()

# NOTE: declining proportions of treated countries in the last periods. Maybe due to reporting bias.

## Proportions by country 
summarize(data_treat, 
          prop_treat = mean(dis_dummy),
          prop_no_treat = 1 - mean(dis_dummy),
            .by = iso3c) |> 
  arrange(desc(prop_treat))
```

## Treatment assignment

Non-absorbing, staggered, multiple treatments (on-and-off).

### First-treatment staggered

```{r data_cohort}

# create cohort variable
data_cohort <- data_treat |> 
  mutate(
    cohort_dis = ifelse(sum(dis_dummy) > 0, min(year[dis_dummy == 1]), 9999),
    cohort_dis_large = ifelse(sum(dis_large_dummy) > 0, min(year[dis_large_dummy == 1]), 9999),
      .by = iso3c
    )

## frequency by cohort years
# all events
summarize(data_cohort,
          freq_country = length(unique(iso3c)),
          .by = cohort_dis) |> 
  arrange(cohort_dis)

# large events
summarize(data_cohort,
          freq_country = length(unique(iso3c)),
          .by = cohort_dis_large
          ) |> 
  arrange(cohort_dis_large)

# create dummy vars first-treatment
data_first <- data_cohort |> 
  mutate(
    treat_first = ifelse(year == cohort_dis, 1, 0),
    treat_first_stag = ifelse(year >= cohort_dis, 1, 0),
    treat_large_first = ifelse(year == cohort_dis_large, 1, 0),
    treat_large_first_stag = ifelse(year >= cohort_dis_large, 1, 0)
  )
```

#### Treatment paths

```{r}

panelview(1 ~ treat_first_stag, data = data_first,           
          index = c("iso3c","year"),
          axis.lab = "time",
          by.timing = TRUE,                   
          background = "white",
          main = "Treatment Status: All events"
          )

panelview(1 ~ treat_large_first_stag, data = data_first,           
          index = c("iso3c","year"),
          axis.lab = "time",
          by.timing = TRUE,                   
          background = "white",
          main = "Treatment Status: Large events only"
          )
```


```{r label_vars}

# Label new variables
# labelled::var_label() <- list( = "")
```

### Relative time since first treatment

```{r}

# cf. Deryugina, 2017
# short-term: 0-4 years
# medium/long-term 5-10 years

data_first <- data_first |> 
  mutate(
# relative time to first-treatment    
    rel_time = year - cohort_dis,
    rel_time_large = year - cohort_dis_large,
# binary treatment, short/long, all hazards 
    treat_first_short = ifelse(rel_time %in% 0:4, 1, 0),
    treat_first_long = ifelse(rel_time %in% 5:10, 1, 0),
    treat_first_out = ifelse(!rel_time %in% 0:10, 1, 0),
# binary treatment, short/long, large hazards 
    treat_first_large_short = ifelse(rel_time_large %in% 0:4, 1, 0),
    treat_first_large_long = ifelse(rel_time_large %in% 5:10, 1, 0)
  )
```

### Cumulative staggered

## Relative treatment paths

```{r}
#| eval: false

map(treat.vars, \(x) {   
  # Create the relative treatment time variables 
  treat_path <- treatment_iso |>    
    panel(~iso3c+year) |>    
    group_by(iso3c) |>    
    mutate(     
      l5_D = lag(.data[[x]], n = 6L),     
      l4_D = lag(.data[[x]], n = 5L),     
      l3_D = lag(.data[[x]], n = 4L),     
      l2_D = lag(.data[[x]], n = 3L),     
      l1_D = lag(.data[[x]], n = 2L),     
      t_D = lag(.data[[x]], n = 1L) 
      # f1_D = x, 
      # f2_D = lead(x, n = 1L), 
      # f3_D = lead(x, n = 2L), 
      # f4_D = lead(x, n = 3L), 
      # f5_D = lead(x, n = 4L),   
      )  
  
  # Identify relative treatment time variables 
  rel_treat <- names(treat_path)[str_detect(names(treat_path), "_D$")]  

  # Concatenate these variables into a new variable row-wise 
  treat_path <- treat_path |>   
  rowwise() |>
  mutate(rel_treat_path = paste(c_across(all_of(rel_treat)), collapse = ",")) |>   
  ungroup()  

  # List and count all observed relative treatment paths 
  treat_path |>  
  # only keep obs. treated in t 
  # remove treat.paths w/ NAs   
  filter(t_D==1 & !grepl("NA", rel_treat_path)) |>    
  group_by(rel_treat_path) |>    
  tally() |>    
  arrange(desc(n))    
})
```

## Save

```{r data_treatment}

data_treatment <- data_first

save(data_treatment,
     file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\treatment\\data_treatment.RData")
```
