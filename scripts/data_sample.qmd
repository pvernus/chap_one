---
title: "Untitled"
format: docx
editor: visual
bibliography: references.bib
---

```{r, load_pckg}

source(here::here('scripts', 'library.R'))
```

```{r load_data}

# outcome
load(file =  "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_outcome.RData")
# treatment
load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\treatment\\data_treatment.RData")
# covariates
load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\covariate\\data_covariate.RData")
# load(here('data', 'data_covariate.RData'))
# units
load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_unit.RData")
```

> NOTE(1): should the typology (categories) be defined here or earlier in data_crs? E.g. data cleaning in `data_crs` and data transformation in `data_sample`
>
> NOTE(2): same question as above for the definition of the observation window.

# Multiple Dummies On (MDO)

Define panel data

```{r treatment}

df <- data_treat |> 
  select(iso3c, year, d.name = dis_dummy)
```

Create last leads and lags

```{r}

df.l <- df |> 
  mutate(
    # create leads
    f2_d = lead(d.name, 2, order_by = year),
    f1_d = lead(d.name, 1, order_by = year),
    # create lags
    l1_d = lag(d.name, 1, order_by = year),
    l2_d = lag(d.name, 2, order_by = year),
    l3_d = lag(d.name, 3, order_by = year),
    l4_d = lag(d.name, 4, order_by = year),
    l5_d = lag(d.name, 5, order_by = year),
    .by = iso3c
  )
```

For a balanced panel of the dependent variable from $[\underline{t}, \overline{t}]$ and a limited effect window $[\underline{j}, \overline{j}]$, we need to observe events from $\underline{t} − \overline{j} + 1$ to $\overline{t} + |\underline{j}| − 1$.

```{r}

# function for reverse cumulative sum of vector
revcumsum <- function(x) {
  rev(cumsum(rev(x)))
}

# generate binned endpoints
treatment <- df.l |> 
  # define estimation sample
  filter(year %in% 2006:2016) |> 
  # as suggested by , the unobserved 3rd lead of the treatment adoption indicator for 2016 can be set to an arbitrary value, # e.g. zero.
#  mutate(f2_d = ifelse(year==2015, 0, f4_d)) |> 
    mutate(
    l5bin_d = ave(l5_d, iso3c, FUN = cumsum), # lags
    f2bin_d = ave(f2_d, iso3c, FUN = revcumsum) # leads
         )

```

Define panel dyadic data

```{r outcome}

outcome <- data_outcome_hum |> 
  select(donor_id, cohort_donor, recipient_id, cohort_recipient, 
         year, 
         sector_hum, 
         y.name = commit_total) |> 
    summarize(
    y.hum = sum(y.name[sector_hum=="Humanitarian"], na.rm = T),
    y.dev = sum(y.name[sector_hum!="Humanitarian"], na.rm = T),
    .by = c("donor_id", "recipient_id", "year"))
```

Merge treatment and outcome samples

```{r}

# sample
df_es_bin <- data_unit |> 
  # merge treatment
  left_join(treatment, by = c("iso3c", "year")) |> 
  # merge outcome
  left_join(outcome, by = c("donor_id", "recipient_id", "year")) |> 
  # create ID unit variable
  mutate(id = paste0(donor_id, sep = "_", recipient_id)) |> 
  relocate(id, .before = year) |> 
  # order rows
  arrange(donor_id, recipient_id, year) |> 
  # define as panel
  panel(~id+year)
```

Add covariates

```{r}

df_es_bin_cov <- df_es_bin |> 
  # rename iso3c
  rename(iso3c_recip = iso3c) |> 
  # add iso3c
  mutate(iso3c_donor = countrycode(sourcevar = donor_name,
                             origin = "country.name",
                             destination = "iso3c",
                             warn = T)) |> 
  mutate(iso3c_donor = ifelse(donor_name=="EU Institutions", "EUR", iso3c_donor)) |> 
  relocate(iso3c_donor, .before = donor_id) |> 
  # add gdp
  mutate(iso3c = iso3c_recip) |> # recip
  left_join(data_gdp, by = c("iso3c", "year")) |> 
  rename(gdp_recip = gdp) |> 
  mutate(iso3c = iso3c_donor) |> #donor
  left_join(data_gdp, by = c("iso3c", "year")) |> 
  rename(gdp_donor = gdp) |> 
  # add pop
  left_join(data_pop, by = c("iso3c", "year")) |> # donor
  rename(pop_donor = pop) |> 
  mutate(iso3c = iso3c_recip) |> # recip
  left_join(data_pop, by = c("iso3c", "year")) |>  
  rename(pop_recip = pop) |> 
  select(-iso3c) |> 
  # remove recipients with no gdp data
  filter(!any(is.na(gdp_recip)), .by = recipient_id)

# gdp data missing for several SIDS and conflict-afflicted countries (Afghanistan, Somalia)
# some missing pop data for Kosovo and SDIS (UN Pop Prospect as potential complement)
# no missing data for donors

# n_distinct(df_es_bin_top_cov$donor_id)*n_distinct(df_es_bin_top_cov$recipient_id)*n_distinct(df_es_bin_top_cov$year)
```

Run regression

```{r}

res = feols(data = df_es_bin,
      log(y.hum+.001) ~ 
        f2bin_d + f1_d +
        d.name + 
        l1_d + l2_d + l3_d + l4_d + l5bin_d |
        id + year + donor_id^year,
      subset = df_es_bin$year >= 2006 & df_es_bin$year <= 2016,
      cluster = ~id
      )

coeftable <- res$coeftable
```

```{r}

table <- data.table(
  time_to_treatment = c(-3:6), 
  coef = c(coeftable[1:2,1],   # leads
           0,                           # reference period
           coeftable[3:9,1]),  # lags
  se = c(coeftable[1:2,2],  # leads
         0,                          # reference period
         coeftable[3:9,2])) # lags
table

```

```{r}

ggplot(table, aes(x = time_to_treatment, y = coef)) +
  geom_line(color = "darkblue") +
  geom_point(color = "darkblue") +
  geom_errorbar(aes(ymin = coef - 1.96*se, ymax = coef + 1.96*se), width=.1,
                color = "darkblue") +
  geom_hline(yintercept = 0) + 
  geom_vline(xintercept = -0.5, linetype = "dashed") +
  scale_x_continuous(breaks = c(-3:6)) +
  xlab(paste0("Year relative to disaster \n Observations: ", nobs(res))) +
  scale_y_continuous(limits=c(-0.06, 0.15), breaks = seq(-0.06, 0.15, by = 0.02)) +
  ylab("Effect on log bilateral ODA") +
  theme_classic()

```

# IN PROGRESS

# Binarize and staggerize

## Event-Study

### Single, binary treatment

#### Baseline

```{r att_bin_stagg}

# treatment
treat_first <- select(data_treat_first,
         iso3c, year, d.name = first_treat_dis)
treat_first_cohort <- select(data_treat_cohort,
         iso3c, year, g.name = cohort_dis)
treatment <- merge(treat_first, treat_first_cohort, by = c("iso3c", "year"))

# outcome
outcome <- data_outcome_hum |> 
  select(donor_id, cohort_donor, recipient_id, cohort_recipient, year, sector_hum, y.name = commit_total) |> 
  filter(year >= 2004) |> 
  # remove donors and recipients entering the sample during the estimation window
  # filter(!c(cohort_donor > 2004 | cohort_recipient > 2004)) |> 
  select(-starts_with("cohort")) |> 
  summarize(
    y.hum = sum(y.name[sector_hum=="Humanitarian"], na.rm = T),
    y.dev = sum(y.name[sector_hum!="Humanitarian"], na.rm = T),
    .by = c("donor_id", "recipient_id", "year"))

# sample
df_es_bin <- data_unit |> 
  # merge treatment
  left_join(treatment, by = c("iso3c", "year")) |> 
  # merge outcome
  left_join(outcome, by = c("donor_id", "recipient_id", "year")) |> 
  # create ID unit variable
  mutate(id = paste0(donor_id, sep = "_", recipient_id)) |> 
  relocate(id, .before = year) |> 
  # order rows
  arrange(donor_id, recipient_id, year)

```

```{r}
# plot treatment status
panelview(data = df_es_bin,
          1 ~ d.name,
          index = c("id", "year"), 
          by.timing = T, 
          collapse.history = T,
          #display.all = T
          )
```

#### Top donors

```{r att_bin_stagg.top}

load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_crs.RData")

# list bilateral vs. multilateral donors
multi <- data_crs |> 
  distinct(donor_id, donor_code) |>
  mutate(multi = ifelse(donor_code == 104 | donor_code %in% 800:1500 & !donor_code %in% c(801, 820, 918), 1, 0)) |> 
  select(-donor_code)

# rank top donors
rank_donor <- data_outcome_hum |> 
  filter(year >= 2004) |> 
  summarize(
          total_hum = sum(commit_total[sector_hum=="Humanitarian"], na.rm = T),
          total_dev = sum(commit_total[sector_hum!="Humanitarian"], na.rm = T),
          .by = c(donor_id, donor_name)
          ) |> 
  mutate(total = total_hum + total_dev) |> 
  arrange(desc(total)) |>
  left_join(multi, by = "donor_id") |> 
  filter(multi<1) |>
  mutate(
    rank_total = rank(-total, ties.method = "min"),
    rank_hum = rank(-total_hum, ties.method = "min"),
    rank_dev = rank(-total_dev, ties.method = "min")
    ) |> 
  mutate(
    cumdis_total = cumsum(total) / sum(total),
    cumdis_hum = cumsum(total_hum) / sum(total_hum),
    cumdis_dev = cumsum(total_dev) / sum(total_dev)
  ) |> 
  # keep donors in top20 in eith hum *or* dev
  filter(rank_hum <= 20 | rank_dev <= 20)

# filter for top donors only
df_es_bin_top <- df_es_bin |> 
  mutate(top = ifelse(donor_id %in% rank_donor$donor_id, 1, 0)) |> 
  filter(top>0) |> 
  select(-top)
```

#### Covariates

```{r att_bin_stagg_top.cov}

df_es_bin_top_cov <- df_es_bin_top |> 
  # rename iso3c
  rename(iso3c_recip = iso3c) |> 
  # add iso3c
  mutate(iso3c_donor = countrycode(sourcevar = donor_name,
                             origin = "country.name",
                             destination = "iso3c",
                             warn = T)) |> 
  mutate(iso3c_donor = ifelse(donor_name=="EU Institutions", "EUR", iso3c_donor)) |> 
  relocate(iso3c_donor, .before = donor_id) |> 
  # add gdp
  mutate(iso3c = iso3c_recip) |> # recip
  left_join(data_gdp, by = c("iso3c", "year")) |> 
  rename(gdp_recip = gdp) |> 
  mutate(iso3c = iso3c_donor) |> #donor
  left_join(data_gdp, by = c("iso3c", "year")) |> 
  rename(gdp_donor = gdp) |> 
  # add pop
  left_join(data_pop, by = c("iso3c", "year")) |> # donor
  rename(pop_donor = pop) |> 
  mutate(iso3c = iso3c_recip) |> # recip
  left_join(data_pop, by = c("iso3c", "year")) |>  
  rename(pop_recip = pop) |> 
  select(-iso3c) |> 
  # remove recipients with no gdp data
  filter(!any(is.na(gdp_recip)), .by = recipient_id)

# gdp data missing for several SIDS and conflict-afflicted countries (Afghanistan, Somalia)
# some missing pop data for Kosovo and SDIS (UN Pop Prospect as potential complement)
# no missing data for donors

# n_distinct(df_es_bin_top_cov$donor_id)*n_distinct(df_es_bin_top_cov$recipient_id)*n_distinct(df_es_bin_top_cov$year)

```

```{r data_es_bin}

data_es_bin <- df_es_bin_top_cov |> 
  # define estimation window
  filter(year >= 2004) |> 
  # remove always-treated
  filter(g.name != 2001) |> 
  # add linear trend
  mutate(t = year - min(year) + 1)

```

## Unique treatment w/ varying intensity, staggered setting

### Quantile dummies

```{r df_att_quantile_stagg}

# treatment
df.rank <- data_treat_rank |> select(iso3c, year, quantile_rank)
df.cohort <- data_treat_cohort |> select(iso3c, year, g.name = cohort_dis)

treatment <- merge(df.rank, df.cohort, by = c("iso3c", "year")) |> 
  mutate(rank_first = first(quantile_rank[year == g.name], default = NA), .by = iso3c) |> 
  # add cohort by quantile
  mutate(
    g.q1 = ifelse(rank_first==1, g.name, 9999),
    g.q2 = ifelse(rank_first==2, g.name, 9999),
    g.q3 = ifelse(rank_first==3, g.name, 9999),
    g.q4 = ifelse(rank_first==4, g.name, 9999)    
  ) |> 
  mutate(across(starts_with("g."), ~ replace_na(., 9999))) |> 
  # add time-to-treatment by quantile
  mutate(
    time_to_treatment.q1 = ifelse(g.q1<2018, year - g.q1, -1000),
    time_to_treatment.q2 = ifelse(g.q2<2018, year - g.q2, -1000),
    time_to_treatment.q3 = ifelse(g.q3<2018, year - g.q3, -1000),
    time_to_treatment.q4 = ifelse(g.q4<2018, year - g.q4, -1000)
    ) |> 
  # add stagg binary dummies by quantile
  mutate(
    treat.q1 = ifelse(rank_first==1 & year >= g.q1, 1, 0),
    treat.q2 = ifelse(rank_first==2 & year >= g.q2, 1, 0),
    treat.q3 = ifelse(rank_first==3 & year >= g.q3, 1, 0),
    treat.q4 = ifelse(rank_first==4 & year >= g.q4, 1, 0)
  )

# outcome
# same as "att_bin_stagg"

# sample
df_att_quantile_stagg <- data_unit |> 
  # merge treatment
  left_join(treatment, by = c("iso3c", "year")) |> 
  # merge outcome
  left_join(outcome, by = c("donor_id", "recipient_id", "year")) |> 
  # create ID unit variable
  mutate(id = paste0(donor_id, sep = "_", recipient_id)) |> 
  relocate(id, .before = year) |> 
  # order rows
  arrange(donor_id, recipient_id, year) |> 
  # define estimation window
  filter(year >= 2004) |> 
  # remove always-treated
  filter(g.name != 2001) |> 
  # add linear trend
  mutate(t = year - min(year) + 1)

df_att_quantile_stagg |> 
  slice_sample(n=1000) |> 
  vis_miss(sort_miss = T)

```


## Static treatment effects, multiple treatment (onset), single dose (staggered), same intensity (binary), total commitments

```{r df_static_multi.onset_stagg_binary_total}

# treatment
treat_first_onset <- select(data_first,
         iso3c, year, d.fast = first_treat_dis_fast, d.slow = first_treat_dis_slow)
treat_first_cohort_onset <- select(data_cohort,
         iso3c, year, g.fast = cohort_dis_fast, g.slow = cohort_dis_slow)
treatment <- merge(treat_first_onset, treat_first_cohort_onset, by = c("iso3c", "year"))
# outcome
outcome <- select(data_outcome,
       donor_id, recipient_id, year, y.name = commit_total)
# sample
df_static_multi.onset_stagg_binary_total <- data_unit |> 
  # remove donors and recipients entering the sample during the estimation window
  filter(!c(cohort_donor > 2008 | cohort_recipient > 2008)) |> 
  select(-starts_with("cohort")) |> 
  # merge treatment
  left_join(treatment, by = c("iso3c", "year")) |> 
  # merge outcome
  left_join(outcome, by = c("donor_id", "recipient_id", "year")) |> 
  # create ID unit variable
  mutate(id = paste0(donor_id, sep = "_", recipient_id)) |> 
  relocate(id, .before = year) |> 
  # order rows
  arrange(donor_id, recipient_id, year)

# plot treatment status
list_onset <- list("d.slow", "d.fast")
treat_status_onset <- list_onset |> 
  map(\(x) panelview(data = df_static_multi.onset_stagg_binary_total,
          # formula = y.name ~ d.fast + d.slow,
          Y = "y.name",
          D = x,
          index = c("id", "year"),
          main = x,
          by.timing = T, 
          collapse.history = T,
          # display.all = T)
          ))

# % of units by cohorts
list_onset_cohort <- list("g.fast", "g.slow")
list_onset_cohort |> 
  map(\(x){

    # Convert the string to a symbol
    x_sym <- sym(x)
    
    df_static_multi.onset_stagg_binary_total |> 
      summarize(
        n = n(),
        usd = sum(y.name, na.rm = T),
        .by = x_sym
        ) |> 
      mutate(
        frac = n/sum(n),
        frac_usd = usd/sum(usd)
        ) |> 
      arrange(desc(frac))
})
```

## Static treatment effects, multiple treatment (phys. chars), single dose (staggered), same intensity (binary), total commitments

```{r df_static_multi.phy_stagg_binary_total}

# treatment
treat_first_phy <- select(data_first,
         iso3c, year, d.hydro = first_treat_dis_hydro, d.meteo = first_treat_dis_meteo, d.clim = first_treat_dis_clim)
treat_first_cohort_phy <- select(data_cohort,
         iso3c, year, g.hydro = cohort_dis_hydro, g.meteo = cohort_dis_meteo, g.clim = cohort_dis_clim)
treatment <- merge(treat_first_phy, treat_first_cohort_phy, by = c("iso3c", "year"))
# outcome
outcome <- select(data_outcome,
       donor_id, recipient_id, year, y.name = commit_total)
# sample
df_static_multi.phy_stagg_binary_total <- data_unit |> 
  # remove donors and recipients entering the sample during the estimation window
  filter(!c(cohort_donor > 2008 | cohort_recipient > 2008)) |> 
  select(-starts_with("cohort")) |> 
  # merge treatment
  left_join(treatment, by = c("iso3c", "year")) |> 
  # merge outcome
  left_join(outcome, by = c("donor_id", "recipient_id", "year")) |> 
  # create ID unit variable
  mutate(id = paste0(donor_id, sep = "_", recipient_id)) |> 
  relocate(id, .before = year) |> 
  # order rows
  arrange(donor_id, recipient_id, year)

# plot treatment status
list_phy <- list("d.hydro", "d.meteo", "d.clim")
treat_status_phy <- list_phy |> 
  map(\(x) panelview(data = df_static_multi.phy_stagg_binary_total,
          # formula = y.name ~ d.hydro + d.meteo + d.clim,
          Y = "y.name",
          D = x,
          index = c("id", "year"),
          main = x,
          by.timing = T, 
          # collapse.history = T,
          # display.all = T)
          ))

# % of units by cohorts
list_phy_cohort <- list("g.hydro", "g.meteo", "g.clim")
list_phy_cohort |> 
  map(\(x){

    # Convert the string to a symbol
    x_sym <- sym(x)
    
    df_static_multi.phy_stagg_binary_total |> 
      summarize(
        n = n(),
        usd = sum(y.name, na.rm = T),
        .by = x_sym
        ) |> 
      mutate(
        frac = n/sum(n),
        frac_usd = usd/sum(usd)
        ) |> 
      arrange(desc(frac))
})
```

# Save

```{r save}

save(data_sample, data_sample_hum,
     file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\data_sample.RData")
```
