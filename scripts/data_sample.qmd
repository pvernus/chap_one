---
title: "Untitled"
format: docx
editor: visual
bibliography: references.bib
---

```{r, load_pckg}

source(here::here('scripts', 'library.R'))
```

```{r load_data}

# outcome
load(file =  "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_outcome.RData")
# treatment
load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\treatment\\data_treatment.RData")
# covariates
load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\covariate\\data_covariate.RData")
# load(here('data', 'data_covariate.RData'))
# units
load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_unit.RData")
```

> NOTE(1): should the typology (categories) be defined here or earlier in data_crs? E.g. data cleaning in `data_crs` and data transformation in `data_sample`
>
> NOTE(2): same question as above for the definition of the observation window.

# ATTs

## Unique and binary treatment, staggered setting

### Baseline

```{r att_bin_stagg}

# treatment
treat_first <- select(data_treat_first,
         iso3c, year, d.name = first_treat_dis)
treat_first_cohort <- select(data_treat_cohort,
         iso3c, year, g.name = cohort_dis)
treatment <- merge(treat_first, treat_first_cohort, by = c("iso3c", "year"))

# outcome
outcome <- data_outcome_hum |> 
  select(donor_id, cohort_donor, recipient_id, cohort_recipient, year, sector_hum, y.name = commit_total) |> 
  filter(year >= 2004) |> 
  # remove donors and recipients entering the sample during the estimation window
  # filter(!c(cohort_donor > 2004 | cohort_recipient > 2004)) |> 
  select(-starts_with("cohort")) |> 
  summarize(
    y.hum = sum(y.name[sector_hum=="Humanitarian"], na.rm = T),
    y.dev = sum(y.name[sector_hum!="Humanitarian"], na.rm = T),
    .by = c("donor_id", "recipient_id", "year"))

# sample
df_att_bin_stagg <- data_unit |> 
  # merge treatment
  left_join(treatment, by = c("iso3c", "year")) |> 
  # merge outcome
  left_join(outcome, by = c("donor_id", "recipient_id", "year")) |> 
  # create ID unit variable
  mutate(id = paste0(donor_id, sep = "_", recipient_id)) |> 
  relocate(id, .before = year) |> 
  # order rows
  arrange(donor_id, recipient_id, year)

```

```{r}
# plot treatment status
panelview(data = df_att_bin_stagg,
          1 ~ d.name,
          index = c("id", "year"), 
          by.timing = T, 
          collapse.history = T,
          #display.all = T
          )
```

### Split by donor size (top 20)

```{r}

c(800:1500, 104, -801, -820, -918)


c(104, 807, 811, 812, 901, 902, 903, 905, 906, 907, 909, 910, 913, 914, 915, 921, 923, 926, 928, 932, 940, 944, 948, 951, 952, 953, 954, 956, 958, 959, 960, 962, 963, 964, 966, 967, 971, 974, 976, 978, 979, 980, 981, 982, 983, 988, 990, 992, 997, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1037, 1038, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1311, 1312, 1313, 1401, 1403, 1404, 1406)
```


```{r rank_donor}

load(file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\outcome\\data_crs.RData")

multi <- data_crs |> 
  distinct(donor_id, donor_code) |>
  mutate(multi = ifelse(donor_code == 104 | donor_code %in% 800:1500 & !donor_code %in% c(801, 820), 1, 0)) |> 
  select(-donor_code)

rank_donor <- data_outcome_hum |> 
  filter(year >= 2004) |> 
  summarize(
          total_hum = sum(commit_total[sector_hum=="Humanitarian"], na.rm = T),
          total_dev = sum(commit_total[sector_hum!="Humanitarian"], na.rm = T),
          .by = c(donor_id, donor_name)
          ) |> 
  mutate(total = total_hum + total_dev) |> 
  arrange(desc(total)) |>
  left_join(multi, by = "donor_id") |> 
  filter(multi<1) |>
  mutate(
    rank_total = rank(-total, ties.method = "min"),
    rank_hum = rank(-total_hum, ties.method = "min"),
    rank_dev = rank(-total_dev, ties.method = "min")
    ) |> 
  mutate(
    cumdis_total = cumsum(total) / sum(total),
    cumdis_hum = cumsum(total_hum) / sum(total_hum),
    cumdis_dev = cumsum(total_dev) / sum(total_dev)
  ) |> 
  # keep donors in top20 in eith hum *or* dev
  filter(rank_hum <= 20 | rank_dev <= 20)
```

## Unique treatment w/ varying intensity, staggered setting

### Quantile dummies

```{r df_att_quantile_stagg}

# treatment
df.rank <- data_treat_rank |> select(iso3c, year, quantile_rank)
df.cohort <- data_treat_cohort |> select(iso3c, year, g.name = cohort_dis)

treatment <- merge(df.rank, df.cohort, by = c("iso3c", "year")) |> 
  mutate(rank_first = first(quantile_rank[year == g.name], default = NA), .by = iso3c) |> 
  # add cohort by quantile
  mutate(
    g.q1 = ifelse(rank_first==1, g.name, 9999),
    g.q2 = ifelse(rank_first==2, g.name, 9999),
    g.q3 = ifelse(rank_first==3, g.name, 9999),
    g.q4 = ifelse(rank_first==4, g.name, 9999)    
  ) |> 
  mutate(across(starts_with("g."), ~ replace_na(., 9999))) |> 
  # add time-to-treatment by quantile
  mutate(
    time_to_treatment.q1 = ifelse(g.q1<2018, year - g.q1, -1000),
    time_to_treatment.q2 = ifelse(g.q2<2018, year - g.q2, -1000),
    time_to_treatment.q3 = ifelse(g.q3<2018, year - g.q3, -1000),
    time_to_treatment.q4 = ifelse(g.q4<2018, year - g.q4, -1000)
    ) |> 
  # add stagg binary dummies by quantile
  mutate(
    treat.q1 = ifelse(rank_first==1 & year >= g.q1, 1, 0),
    treat.q2 = ifelse(rank_first==2 & year >= g.q2, 1, 0),
    treat.q3 = ifelse(rank_first==3 & year >= g.q3, 1, 0),
    treat.q4 = ifelse(rank_first==4 & year >= g.q4, 1, 0)
  )

# outcome
# same as "att_bin_stagg"

# sample
df_att_quantile_stagg <- data_unit |> 
  # merge treatment
  left_join(treatment, by = c("iso3c", "year")) |> 
  # merge outcome
  left_join(outcome, by = c("donor_id", "recipient_id", "year")) |> 
  # create ID unit variable
  mutate(id = paste0(donor_id, sep = "_", recipient_id)) |> 
  relocate(id, .before = year) |> 
  # order rows
  arrange(donor_id, recipient_id, year) |> 
  # define estimation window
  filter(year >= 2004) |> 
  # remove always-treated
  filter(g.name != 2001) |> 
  # add linear trend
  mutate(t = year - min(year) + 1)

df_att_quantile_stagg |> 
  slice_sample(n=1000) |> 
  vis_miss(sort_miss = T)

```


## Static treatment effects, multiple treatment (onset), single dose (staggered), same intensity (binary), total commitments

```{r df_static_multi.onset_stagg_binary_total}

# treatment
treat_first_onset <- select(data_first,
         iso3c, year, d.fast = first_treat_dis_fast, d.slow = first_treat_dis_slow)
treat_first_cohort_onset <- select(data_cohort,
         iso3c, year, g.fast = cohort_dis_fast, g.slow = cohort_dis_slow)
treatment <- merge(treat_first_onset, treat_first_cohort_onset, by = c("iso3c", "year"))
# outcome
outcome <- select(data_outcome,
       donor_id, recipient_id, year, y.name = commit_total)
# sample
df_static_multi.onset_stagg_binary_total <- data_unit |> 
  # remove donors and recipients entering the sample during the estimation window
  filter(!c(cohort_donor > 2008 | cohort_recipient > 2008)) |> 
  select(-starts_with("cohort")) |> 
  # merge treatment
  left_join(treatment, by = c("iso3c", "year")) |> 
  # merge outcome
  left_join(outcome, by = c("donor_id", "recipient_id", "year")) |> 
  # create ID unit variable
  mutate(id = paste0(donor_id, sep = "_", recipient_id)) |> 
  relocate(id, .before = year) |> 
  # order rows
  arrange(donor_id, recipient_id, year)

# plot treatment status
list_onset <- list("d.slow", "d.fast")
treat_status_onset <- list_onset |> 
  map(\(x) panelview(data = df_static_multi.onset_stagg_binary_total,
          # formula = y.name ~ d.fast + d.slow,
          Y = "y.name",
          D = x,
          index = c("id", "year"),
          main = x,
          by.timing = T, 
          collapse.history = T,
          # display.all = T)
          ))

# % of units by cohorts
list_onset_cohort <- list("g.fast", "g.slow")
list_onset_cohort |> 
  map(\(x){

    # Convert the string to a symbol
    x_sym <- sym(x)
    
    df_static_multi.onset_stagg_binary_total |> 
      summarize(
        n = n(),
        usd = sum(y.name, na.rm = T),
        .by = x_sym
        ) |> 
      mutate(
        frac = n/sum(n),
        frac_usd = usd/sum(usd)
        ) |> 
      arrange(desc(frac))
})
```

## Static treatment effects, multiple treatment (phys. chars), single dose (staggered), same intensity (binary), total commitments

```{r df_static_multi.phy_stagg_binary_total}

# treatment
treat_first_phy <- select(data_first,
         iso3c, year, d.hydro = first_treat_dis_hydro, d.meteo = first_treat_dis_meteo, d.clim = first_treat_dis_clim)
treat_first_cohort_phy <- select(data_cohort,
         iso3c, year, g.hydro = cohort_dis_hydro, g.meteo = cohort_dis_meteo, g.clim = cohort_dis_clim)
treatment <- merge(treat_first_phy, treat_first_cohort_phy, by = c("iso3c", "year"))
# outcome
outcome <- select(data_outcome,
       donor_id, recipient_id, year, y.name = commit_total)
# sample
df_static_multi.phy_stagg_binary_total <- data_unit |> 
  # remove donors and recipients entering the sample during the estimation window
  filter(!c(cohort_donor > 2008 | cohort_recipient > 2008)) |> 
  select(-starts_with("cohort")) |> 
  # merge treatment
  left_join(treatment, by = c("iso3c", "year")) |> 
  # merge outcome
  left_join(outcome, by = c("donor_id", "recipient_id", "year")) |> 
  # create ID unit variable
  mutate(id = paste0(donor_id, sep = "_", recipient_id)) |> 
  relocate(id, .before = year) |> 
  # order rows
  arrange(donor_id, recipient_id, year)

# plot treatment status
list_phy <- list("d.hydro", "d.meteo", "d.clim")
treat_status_phy <- list_phy |> 
  map(\(x) panelview(data = df_static_multi.phy_stagg_binary_total,
          # formula = y.name ~ d.hydro + d.meteo + d.clim,
          Y = "y.name",
          D = x,
          index = c("id", "year"),
          main = x,
          by.timing = T, 
          # collapse.history = T,
          # display.all = T)
          ))

# % of units by cohorts
list_phy_cohort <- list("g.hydro", "g.meteo", "g.clim")
list_phy_cohort |> 
  map(\(x){

    # Convert the string to a symbol
    x_sym <- sym(x)
    
    df_static_multi.phy_stagg_binary_total |> 
      summarize(
        n = n(),
        usd = sum(y.name, na.rm = T),
        .by = x_sym
        ) |> 
      mutate(
        frac = n/sum(n),
        frac_usd = usd/sum(usd)
        ) |> 
      arrange(desc(frac))
})
```

# Save

```{r save}

save(data_sample, data_sample_hum,
     file = "C:\\Users\\pauvernu\\Seafile\\library\\chap_one_data\\data\\data_sample.RData")
```
